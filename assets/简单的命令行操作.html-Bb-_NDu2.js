import{_ as i,c as a,d as s,o as n}from"./app-DmFtx4ff.js";const t={};function l(r,e){return n(),a("div",null,e[0]||(e[0]=[s('<h1 id="简单的命令行操作" tabindex="-1"><a class="header-anchor" href="#简单的命令行操作"><span>简单的命令行操作</span></a></h1><blockquote><p>前言：本人在学习计算机的时候，最开始看不懂命令行操作，导致对于一些底层的东西不了解，而且我发现命令行有的时候确实很方便，自由度也更高，所以打算在这个post里面写一些自己常用的命令行</p></blockquote><h2 id="git相关" tabindex="-1"><a class="header-anchor" href="#git相关"><span>git相关</span></a></h2><p>详细内容请见git的使用</p><h2 id="文件夹相关" tabindex="-1"><a class="header-anchor" href="#文件夹相关"><span>文件夹相关</span></a></h2><ol><li>cd +盘符：作用切换到目的盘符</li></ol><h2 id="编译文件" tabindex="-1"><a class="header-anchor" href="#编译文件"><span>编译文件</span></a></h2><h5 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>c:</span></a></h5><ol><li>gcc -g -o 生成的exe文件的名字.exe 目的c文件的名字.c ===&gt;用于生成exe文件，其中 -g 参数生成的是可以调试的exe文件， -o参数用于指定生成的文件的名字，如果不指定的话，默认生成一个a.exe文件</li><li>./a.exe ===&gt;运行当前目录下的a.exe文件</li><li>rm ./a.exe ===&gt; 删除当前目录下的a.exe文件</li><li>gdb ./a.exe ===&gt;启动gdb调试</li></ol><blockquote><p><strong>GDB 调试步骤（已进入 gdb 环境）：</strong></p><ol><li><p><strong>设置断点</strong>（在 <code>main</code> 函数或指定行号）：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>break main    # 在 main 函数开头打断点  </span></span>\n<span class="line"><span>break 10      # 在第 10 行打断点（替换为你的代码行号）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>运行程序</strong>（触发断点暂停）：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>run          # 启动程序，运行到断点处自动暂停</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>逐行调试</strong>：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>next         # 执行下一行（不进入函数内部，简写 `n`）</span></span>\n<span class="line"><span>step         # 执行下一行（进入函数内部，简写 `s`）</span></span>\n<span class="line"><span>continue     # 继续运行到下一个断点（简写 `c`）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>查看变量值</strong>：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>print x      # 查看变量 x 的值（简写 `p x`）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>退出 GDB</strong>：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>quit         # 退出调试（简写 `q`）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><p><strong>示例调试流程</strong>：</p><p>bash</p><p>复制</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) break main     # 断点设在 main 函数  </span></span>\n<span class="line"><span>(gdb) run            # 运行，暂停在 main 函数开头  </span></span>\n<span class="line"><span>(gdb) next           # 逐行执行  </span></span>\n<span class="line"><span>(gdb) print x        # 查看变量 x  </span></span>\n<span class="line"><span>(gdb) quit           # 退出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>-----From DeepSeek R1</strong></p></blockquote>',10)]))}const p=i(t,[["render",l],["__file","简单的命令行操作.html.vue"]]),o=JSON.parse('{"path":"/posts/%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C.html","title":"简单的命令行操作","lang":"zh-CN","frontmatter":{"title":"简单的命令行操作","date":"2025-01-24T00:00:00.000Z","description":"简单的命令行操作 前言：本人在学习计算机的时候，最开始看不懂命令行操作，导致对于一些底层的东西不了解，而且我发现命令行有的时候确实很方便，自由度也更高，所以打算在这个post里面写一些自己常用的命令行 git相关 详细内容请见git的使用 文件夹相关 cd +盘符：作用切换到目的盘符 编译文件 c: gcc -g -o 生成的exe文件的名字.exe ...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"简单的命令行操作"}],["meta",{"property":"og:description","content":"简单的命令行操作 前言：本人在学习计算机的时候，最开始看不懂命令行操作，导致对于一些底层的东西不了解，而且我发现命令行有的时候确实很方便，自由度也更高，所以打算在这个post里面写一些自己常用的命令行 git相关 详细内容请见git的使用 文件夹相关 cd +盘符：作用切换到目的盘符 编译文件 c: gcc -g -o 生成的exe文件的名字.exe ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-25T07:08:41.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-25T07:08:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单的命令行操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-25T07:08:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"git相关","slug":"git相关","link":"#git相关","children":[]},{"level":2,"title":"文件夹相关","slug":"文件夹相关","link":"#文件夹相关","children":[]},{"level":2,"title":"编译文件","slug":"编译文件","link":"#编译文件","children":[]}],"git":{"createdTime":1737788921000,"updatedTime":1737788921000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":1,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"posts/简单的命令行操作.md","localizedDate":"2025年1月24日","excerpt":"\\n<blockquote>\\n<p>前言：本人在学习计算机的时候，最开始看不懂命令行操作，导致对于一些底层的东西不了解，而且我发现命令行有的时候确实很方便，自由度也更高，所以打算在这个post里面写一些自己常用的命令行</p>\\n</blockquote>\\n<h2>git相关</h2>\\n<p>详细内容请见git的使用</p>\\n<h2>文件夹相关</h2>\\n<ol>\\n<li>cd +盘符：作用切换到目的盘符</li>\\n</ol>\\n<h2>编译文件</h2>\\n<h5>c:</h5>\\n<ol>\\n<li>gcc -g -o 生成的exe文件的名字.exe 目的c文件的名字.c ===&gt;用于生成exe文件，其中 -g 参数生成的是可以调试的exe文件， -o参数用于指定生成的文件的名字，如果不指定的话，默认生成一个a.exe文件</li>\\n<li>./a.exe       ===&gt;运行当前目录下的a.exe文件</li>\\n<li>rm ./a.exe   ===&gt; 删除当前目录下的a.exe文件</li>\\n<li>gdb ./a.exe ===&gt;启动gdb调试</li>\\n</ol>","autoDesc":true}');export{p as comp,o as data};
