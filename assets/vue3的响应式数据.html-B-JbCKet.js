import{_ as t,c as a,d as n,o as r}from"./app-o0WqNDgT.js";const o={};function i(l,e){return r(),a("div",null,e[0]||(e[0]=[n('<h1 id="vue3的响应式数据" tabindex="-1"><a class="header-anchor" href="#vue3的响应式数据"><span>vue3的响应式数据</span></a></h1><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类：</span></a></h2><ol><li><p>ref-&gt; 普通数据类型，也可定义对象类型的响应式数据，生成一个ref对象。（使用ref创建响应式对象数据，底层其实是用reactive实现的，因此也是深层次的）</p></li><li><p>reactive-&gt; 只能定义对象(包括数组)数据类型，深层次的，对象的属性也都是响应式的。reactive生成的响应式数据不能整个修改，（会丧失响应式）可以使用BObjext.assign(object1, boject2),即可把object2复制到object1上</p></li><li><p>computed-&gt; 计算属性</p></li><li><p>toRefs,参数为一个响应式对象，使得里面每个属性都是响应式的响应式数据。如let {name, age}= person; name 和age都不是响应式的，可以let name=ref(<a href="http://person.name" target="_blank" rel="noopener noreferrer">person.name</a>) age=ref(person.age)</p><p>或者： let {name, age}= toRefs(person)</p><p>toRef: let name=toRef(person,name);</p></li><li><p>v-model 用于数据的双向绑定</p></li><li><p>computed:计算属性</p></li></ol><h2 id="特殊用法" tabindex="-1"><a class="header-anchor" href="#特殊用法"><span>特殊用法</span></a></h2><ol><li>watch 的监视</li></ol><hr><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE:</span></a></h2><ol><li>使用解包会导致响应式数据丧失！需要用toRefs，才能够避免出现意外。但是会使得对象中的每一个都变成响应式数据，所以可以使用&quot;storeToRefs&quot;</li></ol>',8)]))}const s=t(o,[["render",i],["__file","vue3的响应式数据.html.vue"]]),c=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vue3%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE.html","title":"vue3的响应式数据","lang":"zh-CN","frontmatter":{"title":"vue3的响应式数据","date":"2025-01-20T00:00:00.000Z","description":"vue3的响应式数据 分类： ref-> 普通数据类型，也可定义对象类型的响应式数据，生成一个ref对象。（使用ref创建响应式对象数据，底层其实是用reactive实现的，因此也是深层次的） reactive-> 只能定义对象(包括数组)数据类型，深层次的，对象的属性也都是响应式的。reactive生成的响应式数据不能整个修改，（会丧失响应式）可以使...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vue3%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"vue3的响应式数据"}],["meta",{"property":"og:description","content":"vue3的响应式数据 分类： ref-> 普通数据类型，也可定义对象类型的响应式数据，生成一个ref对象。（使用ref创建响应式对象数据，底层其实是用reactive实现的，因此也是深层次的） reactive-> 只能定义对象(包括数组)数据类型，深层次的，对象的属性也都是响应式的。reactive生成的响应式数据不能整个修改，（会丧失响应式）可以使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-25T07:08:41.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-25T07:08:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3的响应式数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-25T07:08:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"分类：","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"特殊用法","slug":"特殊用法","link":"#特殊用法","children":[]},{"level":2,"title":"NOTE:","slug":"note","link":"#note","children":[]}],"git":{"createdTime":1737463953000,"updatedTime":1737788921000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":2,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"posts/前端开发/vue3的响应式数据.md","localizedDate":"2025年1月20日","excerpt":"\\n<h2>分类：</h2>\\n<ol>\\n<li>\\n<p>ref-&gt; 普通数据类型，也可定义对象类型的响应式数据，生成一个ref对象。（使用ref创建响应式对象数据，底层其实是用reactive实现的，因此也是深层次的）</p>\\n</li>\\n<li>\\n<p>reactive-&gt; 只能定义对象(包括数组)数据类型，深层次的，对象的属性也都是响应式的。reactive生成的响应式数据不能整个修改，（会丧失响应式）可以使用BObjext.assign(object1, boject2),即可把object2复制到object1上</p>\\n</li>\\n<li>\\n<p>computed-&gt; 计算属性</p>\\n</li>\\n<li>\\n<p>toRefs,参数为一个响应式对象，使得里面每个属性都是响应式的响应式数据。如let {name, age}= person; name 和age都不是响应式的，可以let name=ref(<a href=\\"http://person.name\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">person.name</a>) age=ref(person.age)</p>\\n<p>或者： let {name, age}= toRefs(person)</p>\\n<p>toRef: let name=toRef(person,name);</p>\\n</li>\\n<li>\\n<p>v-model 用于数据的双向绑定</p>\\n</li>\\n<li>\\n<p>computed:计算属性</p>\\n</li>\\n</ol>","autoDesc":true}');export{s as comp,c as data};
