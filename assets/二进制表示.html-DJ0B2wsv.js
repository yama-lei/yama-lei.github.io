import{_ as i,c as o,d as t,b as l,f as n,o as a}from"./app-DkdwgRbT.js";const s="/assets/image-20250217111409374-Ddm9Ai3w.png",r="/assets/image-20250217125953166-E62ZghJd.png",p="/assets/image-20250217192637741-B5QGDQtx.png",g="/assets/image-20250221103502221-CPdgRQZp.png",c="/assets/image-20250223203429112-BhFI06xn.png",d="/assets/image-20250224113901073-C83HtogM.png",h={};function u(m,e){return a(),o("div",null,e[0]||(e[0]=[t('<h1 id="二进制表示" tabindex="-1"><a class="header-anchor" href="#二进制表示"><span>二进制表示</span></a></h1><h2 id="计算机系统概述" tabindex="-1"><a class="header-anchor" href="#计算机系统概述"><span>计算机系统概述</span></a></h2><h3 id="冯诺依曼结构" tabindex="-1"><a class="header-anchor" href="#冯诺依曼结构"><span>冯诺依曼结构</span></a></h3><p>采用 <strong>存储程序</strong> 的工作方式</p><p>计算机由运算器，存储器，控制器，输入/输出设备（I/O 设备）构成。</p><p>其中：</p><ul><li>存储器：存储指令和数据（指令和数据在计算机内部的表示方式一致，但是计算机由识别 他们的方法）</li><li>运算器：内部有 <strong>ALU</strong>（arithmetic and logic unit）算数逻辑单元和通用寄存器组 <strong>GPRs</strong>（General Purposed Register Set），<strong>是指令的执行单元</strong>;</li><li>控制器：<strong>自动地取出指令</strong>; 内有指令寄存器 <strong>IR</strong>(Instruction Register)和 <strong>PC</strong>(Program Count)程序计数器，前者存放从主存中取来的指令</li><li>I/O 设备，输入和输出</li></ul><figure><img src="'+s+'" alt="image-20250217111409374" tabindex="0" loading="lazy"><figcaption>image-20250217111409374</figcaption></figure><blockquote><p>CPU 中 除了‘控制部件’都是运算器；</p><p>注意缩写的含义!</p><figure><img src="'+r+'" alt="image-20250217125953166" tabindex="0" loading="lazy"><figcaption>image-20250217125953166</figcaption></figure><p>图中内容来自教材</p></blockquote><h3 id="程序的表示和执行-核心" tabindex="-1"><a class="header-anchor" href="#程序的表示和执行-核心"><span>程序的表示和执行（核心！！！）</span></a></h3><ol><li>程序在执行前： <ul><li>将数据和指令存放在 <strong>内存</strong> 中</li><li>每一条指令和数据都有地址</li><li>指令有序存放 （但是不一定按序执行）</li><li>将程序的起始地址置入 PC（Program Count）（PC 其实是一个地址寄存器，用于寄存下一个指令的地址）</li></ul></li></ol><blockquote><p>程序执行前指的是“从点击鼠标”到执行第一条指令前的过程</p></blockquote><ol start="2"><li><p>程序执行的过程中：</p><ul><li><p>根据 PC 取指令</p></li><li><p>翻译 PC 指令中的操作码</p></li><li><p>根据操作码：取操作数，执行操作，将结果写入目的地址中</p></li><li><p><strong>修改 PC 为下一条指令的地址</strong>（这是指令依次执行的关键），再循环上述流程</p><blockquote><p>指令中通常包括以下信息：操作码（加减等）源操作数 1 或/和 源操作数 2（的地址） 目的操作数地址</p></blockquote></li></ul></li></ol><p>关于计算机读取指令的过程，还可以看下面 deepseek r1 生成的内容</p><blockquote><h4 id="_1-取指阶段-fetch" tabindex="-1"><a class="header-anchor" href="#_1-取指阶段-fetch"><span><strong>1. 取指阶段（Fetch）</strong></span></a></h4><ul><li><strong>目标</strong>：从内存中读取下一条指令。</li><li><strong>步骤</strong>： <ol><li><strong>程序计数器（PC）</strong>：控制器中的寄存器 PC 存储当前指令的内存地址。</li><li><strong>发送地址</strong>：控制器将 PC 中的地址发送到内存。</li><li><strong>读取指令</strong>：内存根据地址返回指令内容（二进制码）。</li><li><strong>存入指令寄存器（IR）</strong>：指令被临时存入控制器的 <strong>指令寄存器（IR）</strong>。</li><li><strong>更新 PC</strong>：PC 自动+1（或根据跳转指令修改），指向下一条指令地址。</li></ol></li></ul><hr><h4 id="_2-解码阶段-decode" tabindex="-1"><a class="header-anchor" href="#_2-解码阶段-decode"><span><strong>2. 解码阶段（Decode）</strong></span></a></h4><ul><li><strong>目标</strong>：解析指令内容，确定操作类型和操作数。</li><li><strong>步骤</strong>： <ol><li><strong>拆分指令</strong>：指令分为 <strong>操作码（Opcode）*<em>和*</em> 操作数（Operand）</strong>。 <ul><li><strong>操作码</strong>：指明操作类型（如加法、跳转）。</li><li><strong>操作数</strong>：指明数据来源（如寄存器、内存地址）。</li></ul></li><li><strong>控制器生成控制信号</strong>：根据操作码，向各部件发送控制信号（如激活 ALU、选择寄存器）。</li></ol></li></ul><hr><h4 id="_3-执行阶段-execute" tabindex="-1"><a class="header-anchor" href="#_3-执行阶段-execute"><span><strong>3. 执行阶段（Execute）</strong></span></a></h4><ul><li><strong>目标</strong>：完成指令规定的操作。</li><li><strong>可能的操作类型</strong>： <ul><li><strong>算术/逻辑运算</strong>（由 ALU 执行）： <ul><li>例如：<code>ADD R1, R2</code>（将寄存器 R1 和 R2 的值相加）。</li><li>控制器将 R1 和 R2 的数据送入 ALU，ALU 计算结果后存回指定寄存器。</li></ul></li><li><strong>数据移动</strong>： <ul><li>例如：<code>LOAD R1, 0x100</code>（将内存地址 0x100 的数据加载到 R1）。</li><li>控制器从内存读取地址 0x100 的数据，存入寄存器 R1。</li></ul></li><li><strong>控制流跳转</strong>： <ul><li>例如：<code>JMP 0x200</code>（跳转到地址 0x200 执行）。</li><li>直接修改 PC 的值，改变下一条指令地址。</li></ul></li></ul></li></ul><hr><h4 id="_4-写回阶段-write-back" tabindex="-1"><a class="header-anchor" href="#_4-写回阶段-write-back"><span><strong>4. 写回阶段（Write Back）</strong></span></a></h4><ul><li><strong>目标</strong>：将执行结果写回寄存器或内存。</li><li><strong>例如</strong>：运算结果存入寄存器，或内存地址更新数据。</li></ul></blockquote><hr><h3 id="计算机系统的抽象层" tabindex="-1"><a class="header-anchor" href="#计算机系统的抽象层"><span>计算机系统的抽象层</span></a></h3><figure><img src="'+p+'" alt="image-20250217192637741" tabindex="0" loading="lazy"><figcaption>image-20250217192637741</figcaption></figure><p><strong>软硬件交互--ISA</strong></p><p>ISA 是硬件和软件之间的桥梁，规定了软件和硬件之间交互的接口；</p><p>ISA 是一种规约，规定了可执行的指令的集合，以及指令可以接受的操作数的类型。</p><hr><h3 id="机器级语言-机器语言-汇编语言" tabindex="-1"><a class="header-anchor" href="#机器级语言-机器语言-汇编语言"><span>机器级语言：机器语言，汇编语言</span></a></h3><ul><li><p>机器语言：0011.....</p></li><li><p>汇编语言优点： 1. 可读性 2. 便于编写代码。</p></li></ul><p>汇编语言程序!= 汇编程序， <strong>汇编语言程序</strong> 是用汇编语言写的程序；<strong>汇编程序</strong> 是将汇编语言转换成 <strong>机器级语言</strong> 的程序。</p><p>汇编符合某一个 ISA，只能在同一个 ISA 设计的 机器上运行。之所以我们写高级语言不用操心这一个，是因为有一层封装。</p><p><strong>硬件只能执行机器语言程序</strong></p><p><strong>编译与解释</strong>：</p><ol><li>编译：将高级语言源程序-&gt; 机器级语言</li><li>解释：逐条翻译成</li></ol><p>机器代码还需要通过 <strong>指令译码器</strong> 翻译成控制信号</p><figure><img src="'+g+'" alt="image-20250221103502221" tabindex="0" loading="lazy"><figcaption>image-20250221103502221</figcaption></figure><hr><h3 id="一个例子" tabindex="-1"><a class="header-anchor" href="#一个例子"><span>一个例子</span></a></h3><p><strong>8 位</strong> 模型机 M：8 位定长指令字，4 个 GPR，16 个主存单元；8 位指的是指令的长度，GPR 中大部分也为 8 位；</p><blockquote><p>目前市面上大部分的存储设备的主存单元都是 8 位</p></blockquote><p>详细见 ppt。</p><hr><h2 id="二进制编码" tabindex="-1"><a class="header-anchor" href="#二进制编码"><span>二进制编码</span></a></h2><p>机器只能执行二进制的机器代码，只能计算二进制的数据。</p><ul><li>真值：01 序列代表的现实中的值</li><li>机器数：01 序列</li></ul><ol><li>数值型数据</li></ol><p>​ 不同的进制：二进制 B，八进制 O，十六进制 H(或 ox- prefix)</p><ol start="2"><li>非数值型数据</li></ol><p><strong>不同进制之间的转换</strong></p><ol><li>十进制和其他进制</li><li>二进制与十六进制，二进制与八进制。</li></ol><p><strong>定义数据的要素</strong>：</p><ol><li>进制:确定是几进制</li><li>定点/浮点: 因为小数点无法表示，需要有“定点”和”浮点“之分</li><li>编码：确定不同的编码方式</li></ol><hr><p>这一节的重点在于：熟悉进制的转换。</p><h2 id="数值型数据的表示" tabindex="-1"><a class="header-anchor" href="#数值型数据的表示"><span>数值型数据的表示</span></a></h2><p>原码：首位是符号位！</p><h3 id="定点数" tabindex="-1"><a class="header-anchor" href="#定点数"><span>定点数</span></a></h3><p>定点数可以表示小数，也可以表示小数；小数的小数点默认在最左边，整数的小数点默认在最左边。</p><blockquote><p>定点整数：小数点固定在数值位最右，<strong>无需显式表达</strong> 定点小数：小数点固定在数值位最左，<strong>无需显式表达</strong></p></blockquote><p>补码：在模 n 的运算中，任何一个数的补码是它对 n 取模后的结果。</p><p>如果用 n 位二进制来表示补码，则可以表示-2^(n--1) 到 2^(n-1)-1 的数字；</p><p>给定任何一个这个范围中的数字，对 2^n 取模，将这个结果表示为二进制，即得到了这个数的补码。</p><ol><li>显然，对于这个范围之间的正数，补码就是他的本身</li><li>对于负数，先加上 $2^n$，再表示为二进制。</li></ol><blockquote><p><strong>给定一个 8 位的二进制，$2^8$-这个二进制 = 这个二进制按位取反+1；因为在这个二进制+这个二进制的取反 = $2^8$-1</strong></p></blockquote><p>因此，计算 -1101100 的补码，只需要计算 $2^n$-1101100 的二进制表示，即 1101100 按位取反再加一</p><h3 id="补码与源码之间的转换" tabindex="-1"><a class="header-anchor" href="#补码与源码之间的转换"><span>补码与源码之间的转换</span></a></h3><ol><li>原码转成补码：</li></ol><ul><li>正数的原码就是它的补码。</li><li>负数的补码是它的相反数的补码（原码）按位取反再加 1。</li></ul><blockquote><p>补充：负数求补码其实是求这个负数+$2<sup>n$之后的二进制表示（原码或者说补码）而a+a按位取反+1=$2</sup>n$ ,因此求-a的补码，即是要求 <strong>a按位取反+1</strong></p></blockquote><ol start="2"><li>补码转源码：</li></ol><ul><li>依然只用说负数的内容。要求负数的原码，只需要将这个补码的实际值对$2<sup>n$取模，（将结果控制在-2</sup>(n-1) ~2^(n-1)之间)即可得到-a的值，再把a的原码写出，加上符号位即可。</li></ul><blockquote><p>也可以根据下面的内容，求出原码的值</p></blockquote><ol start="3"><li>补码转成真实值</li></ol><figure><img src="'+c+'" alt="image-20250223203429112" tabindex="0" loading="lazy"><figcaption>image-20250223203429112</figcaption></figure><blockquote><p>因为补码对应的真值是 “补码对应的二进制数”-$2^{n}$ 将补码对应的二进制展开，即可得到上面的式子</p></blockquote><p>也可选择先转成源码，再转成真值。</p><p><strong>变形补码</strong>: 一般的补码在只能表示$-2^{n-1}$到 $2^{n-1}+1$的数据，变形补码引入了双符号位</p><h3 id="移码-excess-notation" tabindex="-1"><a class="header-anchor" href="#移码-excess-notation"><span>移码(excess notation)</span></a></h3><p><strong>给每一个数字加上一个偏移量</strong>（bias or excess), 这个新的数字的二进制表示，就是原数字的偏移量。根据移码得到数字的方式-&gt;减去偏移量。</p><p>如，四位二进制表示7，-3，如果偏移量为7，那么前者表示为1110，后者表示为0100;</p><blockquote><p>移码的出现主要是用于浮点数的阶码表示</p></blockquote><h3 id="singed-int-and-unsigned-int" tabindex="-1"><a class="header-anchor" href="#singed-int-and-unsigned-int"><span>Singed int and Unsigned int</span></a></h3><p>有符号数表示范围：$-2^{n-1}$ 到$ 2^{n-1}-1$;</p><p>无符号数表示范围：0 到 $2^{n}$;;</p><h3 id="浮点数-ieee-754" tabindex="-1"><a class="header-anchor" href="#浮点数-ieee-754"><span>浮点数（IEEE 754）</span></a></h3><p>浮点数由符号位+阶码+尾数构成；</p><p>阶码是由<strong>移码</strong>来表示的，bias是$2^{n-1}$; 而尾数是由<strong>原码</strong>来表示的。</p><h4 id="将一个数字转成浮点数编码表示" tabindex="-1"><a class="header-anchor" href="#将一个数字转成浮点数编码表示"><span>将一个数字转成浮点数编码表示</span></a></h4><ol><li>11111=1.1111*$2^{4}$</li><li>符号位：0； 阶码：4+127=1000 0011； 尾数：1111 0000 0000 0000 0000 000（补全至32位）</li><li>最终结果：0 10000011 11110000000000000000000</li></ol><h4 id="浮点数的表示范围" tabindex="-1"><a class="header-anchor" href="#浮点数的表示范围"><span>浮点数的表示范围</span></a></h4><figure><img src="'+d+'" alt="image-20250224113901073" tabindex="0" loading="lazy"><figcaption>image-20250224113901073</figcaption></figure>',86),l("ol",null,[l("li",null,[l("p",null,"32位的浮点数 1+8+23；"),l("ul",null,[l("li",null,[l("strong",null,"NAN"),n("：阶码为FFH，尾数不为0； (Not A Num)")])]),l("blockquote",null,[l("p",null,"NAN对于程序的调试有帮助")]),l("ul",null,[l("li",null,[l("strong",null,"正无穷"),n("：阶码为FFH，尾数全为0，符号位为0；"),l("strong",null,"负无穷"),n("：阶码为FFH，尾数全为0，符号位为1；")]),l("li",null,"0：阶吗和尾数全为零，根据符号位不同，可以有+0和-0的区别。"),l("li",null,[l("strong",null,"规格化数"),n("的范围：$2"),l("sup",{"-23":""},"{127}*(2-2"),n(")$~$2^{-126}*1.0$")]),l("li",null,[l("strong",null,"非规格化数"),n("的特点是： "),l("ul",null,[l("li",null,[l("span",{style:{"text-decoration":"underline"}},[n("阶码固定为 "),l("code",null,"-126"),n("（实际指数 = 阶码值 - 127，但阶码为 "),l("code",null,"0"),n(" 时，实际指数固定为 "),l("code",null,"-126"),n("）。")])]),l("li",null,[l("strong",null,[n("尾数没有隐含的前导 "),l("code",null,"1")]),n("，即尾数的实际值为 "),l("code",null,"0.尾数位"),n("。")]),l("li",null,"非规格化数的表示范围是：$2^{}$")])])]),l("blockquote",null,[l("p",null,[l("span",{style:{"text-decoration":"underline"}},[l("strong",null,"规格化数"),n("的阶码部分范围为"),l("strong",null,"1~254")]),n("；阶码为0是非规格化数（阶码全零尾数非零的部分：范围是$$）")])])])],-1),t('<h4 id="浮点数的规格化" tabindex="-1"><a class="header-anchor" href="#浮点数的规格化"><span>浮点数的规格化</span></a></h4><p>下面的回答来自deepseek</p><blockquote><ul><li><h3 id="右规与左规" tabindex="-1"><a class="header-anchor" href="#右规与左规"><span>右规与左规</span></a></h3><h4 id="右规-right-normalization" tabindex="-1"><a class="header-anchor" href="#右规-right-normalization"><span>右规（Right Normalization）</span></a></h4><p><strong>使用场景</strong>：当尾数绝对值 ≥ <code>2.0</code> 时，需右规。</p><p><strong>操作</strong>：</p><ol><li>尾数右移 1 位。</li><li>指数加 1。</li></ol><p><strong>例子</strong>：</p><p>$$\\text{Value} = 10.110 \\times 2^3<br> $$</p><ul><li>尾数 <code>10.110</code> = <code>2.75</code> ≥ <code>2.0</code>，需右规。</li><li>右规后：<br> $<br> \\text{Value} = 1.0110 \\times 2^4<br> $</li></ul><hr><h4 id="左规-left-normalization" tabindex="-1"><a class="header-anchor" href="#左规-left-normalization"><span>左规（Left Normalization）</span></a></h4><p><strong>使用场景</strong>：当尾数绝对值 &lt; <code>1.0</code> 时，需左规。</p><p><strong>操作</strong>：</p><ol><li>尾数左移 1 位。</li><li>指数减 1。</li></ol><p><strong>例子</strong>：<br> $<br> \\text{Value} = 0.1101 \\times 2^3<br> $</p><ul><li>尾数 <code>0.1101</code> = <code>0.8125</code> &lt; <code>1.0</code>，需左规。</li><li>左规后：<br> $<br> \\text{Value} = 1.101 \\times 2^2<br> $</li></ul><hr><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ul><li><strong>右规</strong>：尾数 ≥ <code>2.0</code> 时，尾数右移，指数加 1。</li><li><strong>左规</strong>：尾数 &lt; <code>1.0</code> 时，尾数左移，指数减 1。</li><li>规范化确保尾数范围在 <code>[1.0, 2.0)</code>。</li></ul></li></ul></blockquote><h3 id="不同数据类型之间的强制类型转换" tabindex="-1"><a class="header-anchor" href="#不同数据类型之间的强制类型转换"><span>不同数据类型之间的强制类型转换</span></a></h3><h4 id="整数有符号和无符号" tabindex="-1"><a class="header-anchor" href="#整数有符号和无符号"><span>整数有符号和无符号</span></a></h4><h4 id="float-int-double之间的转换" tabindex="-1"><a class="header-anchor" href="#float-int-double之间的转换"><span>float,int,double之间的转换</span></a></h4>',6)]))}const f=i(h,[["render",u],["__file","二进制表示.html.vue"]]),x=JSON.parse('{"path":"/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA.html","title":"二进制表示","lang":"zh-CN","frontmatter":{"title":"二进制表示","description":"二进制表示 计算机系统概述 冯诺依曼结构 采用 存储程序 的工作方式 计算机由运算器，存储器，控制器，输入/输出设备（I/O 设备）构成。 其中： 存储器：存储指令和数据（指令和数据在计算机内部的表示方式一致，但是计算机由识别 他们的方法） 运算器：内部有 ALU（arithmetic and logic unit）算数逻辑单元和通用寄存器组 GPRs...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"二进制表示"}],["meta",{"property":"og:description","content":"二进制表示 计算机系统概述 冯诺依曼结构 采用 存储程序 的工作方式 计算机由运算器，存储器，控制器，输入/输出设备（I/O 设备）构成。 其中： 存储器：存储指令和数据（指令和数据在计算机内部的表示方式一致，但是计算机由识别 他们的方法） 运算器：内部有 ALU（arithmetic and logic unit）算数逻辑单元和通用寄存器组 GPRs..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:44:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:44:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二进制表示\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:44:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"计算机系统概述","slug":"计算机系统概述","link":"#计算机系统概述","children":[{"level":3,"title":"冯诺依曼结构","slug":"冯诺依曼结构","link":"#冯诺依曼结构","children":[]},{"level":3,"title":"程序的表示和执行（核心！！！）","slug":"程序的表示和执行-核心","link":"#程序的表示和执行-核心","children":[]},{"level":3,"title":"计算机系统的抽象层","slug":"计算机系统的抽象层","link":"#计算机系统的抽象层","children":[]},{"level":3,"title":"机器级语言：机器语言，汇编语言","slug":"机器级语言-机器语言-汇编语言","link":"#机器级语言-机器语言-汇编语言","children":[]},{"level":3,"title":"一个例子","slug":"一个例子","link":"#一个例子","children":[]}]},{"level":2,"title":"二进制编码","slug":"二进制编码","link":"#二进制编码","children":[]},{"level":2,"title":"数值型数据的表示","slug":"数值型数据的表示","link":"#数值型数据的表示","children":[{"level":3,"title":"定点数","slug":"定点数","link":"#定点数","children":[]},{"level":3,"title":"补码与源码之间的转换","slug":"补码与源码之间的转换","link":"#补码与源码之间的转换","children":[]},{"level":3,"title":"移码(excess notation)","slug":"移码-excess-notation","link":"#移码-excess-notation","children":[]},{"level":3,"title":"Singed int and Unsigned int","slug":"singed-int-and-unsigned-int","link":"#singed-int-and-unsigned-int","children":[]},{"level":3,"title":"浮点数（IEEE 754）","slug":"浮点数-ieee-754","link":"#浮点数-ieee-754","children":[]},{"level":3,"title":"不同数据类型之间的强制类型转换","slug":"不同数据类型之间的强制类型转换","link":"#不同数据类型之间的强制类型转换","children":[]}]}],"git":{"createdTime":1739792477000,"updatedTime":1740401099000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":4,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":9.33,"words":2798},"filePathRelative":"posts/NJUCS/数字逻辑与计算机组成/二进制表示.md","localizedDate":"2025年2月17日","excerpt":"\\n<h2>计算机系统概述</h2>\\n<h3>冯诺依曼结构</h3>\\n<p>采用 <strong>存储程序</strong> 的工作方式</p>\\n<p>计算机由运算器，存储器，控制器，输入/输出设备（I/O 设备）构成。</p>\\n<p>其中：</p>\\n<ul>\\n<li>存储器：存储指令和数据（指令和数据在计算机内部的表示方式一致，但是计算机由识别 他们的方法）</li>\\n<li>运算器：内部有 <strong>ALU</strong>（arithmetic and logic unit）算数逻辑单元和通用寄存器组 <strong>GPRs</strong>（General Purposed Register Set），<strong>是指令的执行单元</strong>;</li>\\n<li>控制器：<strong>自动地取出指令</strong>; 内有指令寄存器 <strong>IR</strong>(Instruction Register)和 <strong>PC</strong>(Program Count)程序计数器，前者存放从主存中取来的指令</li>\\n<li>I/O 设备，输入和输出</li>\\n</ul>","autoDesc":true}');export{f as comp,x as data};
