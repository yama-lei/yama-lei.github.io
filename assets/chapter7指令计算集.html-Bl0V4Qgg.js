import{_ as t,c as a,d as n,o as p}from"./app-CTobDjGc.js";const l={};function o(e,i){return p(),a("div",null,i[0]||(i[0]=[n('<h2 id="概述与指令系统设计" tabindex="-1"><a class="header-anchor" href="#概述与指令系统设计"><span>概述与指令系统设计</span></a></h2><p><strong>指令的执行过程</strong></p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250411114304240.png" alt="image-20250411114304240" tabindex="0" loading="lazy"><figcaption>image-20250411114304240</figcaption></figure><p><strong>一条指令必须明显或隐含包含的信息</strong>：</p><ul><li><p>操作码：指定操作类型<br> (操作码长度：固定／可变)</p></li><li><p>源操作数参照：一个或多个源操作数所在的地址</p><p>（源操作数或其地址，由取址方式决定）</p><p>(操作数来源：主(虚)存/寄存器/I/O端口/指令本身）</p></li><li><p>结果值参照：产生的结果存放何处（目的操作数）<br> (结果地址：主(虚)存/寄存器/I/O端口)</p></li><li><p>下一条指令地址：下条指令存放何处<br> (下条指令地址：主(虚)存)<br> (正常情况<strong>隐含在PC</strong>中，改变顺序时由指令给出）(PC会自动改变)</p></li></ul><hr><p>ISA的要素：指令集</p><p>指令的要素：操作码，地址码</p><p>CPU执行指令的步骤：读取指令、译码、取操作数、运算、存数、读取下一条指令。</p><blockquote><p>操作码和译码、运算有关</p></blockquote><hr><p>指令按照地址码的字段个数可以分为0地址操作码，1地址操作码，等等。RISC-V的风格是三地址指令。<code>OP A1 A2 A3</code>.</p><hr><p>指令设计的要求：</p><ul><li>一个编码对应唯一的操作码</li><li>长度是字节的整数倍</li></ul><hr><h3 id="操作数类型和存储方式" tabindex="-1"><a class="header-anchor" href="#操作数类型和存储方式"><span><strong>操作数类型和存储方式</strong>：</span></a></h3><ol><li><p>操作数类型：</p><ul><li>地址</li><li>数值数据</li><li>位串等</li><li>布尔数据</li></ul></li><li><p>操作数可以存放在：1. 寄存器 2. 内存单元 3. 立即数（和指令放在一起） 中</p></li></ol><p><strong>寻址方式</strong></p><p>根据地址找到指或操作数的方法。</p><p><strong>地址码编码原则</strong>： 编码地址尽量短（指令短-&gt;汇编代码短-&gt;机械码短），位置尽量灵活、空间尽量大（利于编译器优化），地址的计算尽量简单（指令执行速度快）。</p><p>指令的寻址相对简单：</p><ol><li>PC增加</li><li>特殊的跳转：JUMP，call，return等</li></ol><hr><p><strong>下面主要讲操作数的寻址方式：</strong></p><ul><li><p>寻址方式确定：</p><ol><li>无单独的寻址方式位，由操作码确定寻址方式</li><li>由单独的寻址方式</li></ol></li><li><p>有效地址：</p><p>操作数所在存储单元的地址（可能是逻辑地址或物理地址），可通过指令的<strong>寻址方式和地址码计算</strong>得到</p></li></ul><p>基本寻址方式的算法和优缺点：</p><blockquote><p>A表示地址段值，R位寄存器编号，EA为有效地址，（X）为X存储的值</p></blockquote><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414104410961.png" alt="image-20250414104410961" tabindex="0" loading="lazy"><figcaption>image-20250414104410961</figcaption></figure><blockquote><p>有效地址其实都是操作数在内存里面的位置！</p></blockquote><p>总结：</p><ul><li><p>直接寻址和寄存器直接寻址的操作数分别是在指令和寄存器中</p><blockquote><p>直接寻址的操作数在内存里，只需要访问一次内存（存储器），得到的就是数据；间接寻址第一次得到的是有效地址EA</p></blockquote></li><li><p>间接寻址是先找到存储有效地址EA的地址，然后在从EA地址中取出（EA)</p></li><li><p>寄存机间接寻址，寄存器中存储的是EA。</p></li><li><p>偏移寻址：EA=A+（R)。</p><ul><li><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414105327810.png" alt="image-20250414105327810" tabindex="0" loading="lazy"><figcaption>image-20250414105327810</figcaption></li><li>变址寻址可以实现通过I的改变，寻得不同的数据，而指令可以用同一个指令，可以用于实现类似for循环的功能。</li></ul></li><li><p>即，相对寻址和基址寻址都是以寄存器中的为基准，偏移A个位置；而变址寻址是以A为基准，偏移（R）个位置。</p></li></ul><hr><h3 id="指令格式" tabindex="-1"><a class="header-anchor" href="#指令格式"><span><strong>指令格式</strong></span></a></h3><p><strong>操作码的编码</strong>:</p><ol><li>定长操作码</li><li>变长操作码 （减少空间消耗，性能开销大）</li></ol><blockquote><p>变长操作码一定是和变长指令字相配合；</p></blockquote><p><strong>定长编码</strong>：</p><p>操作码固定长度：</p><p>自己看ppt吧，这里没听懂；</p><hr><hr><p><strong>如何找到下一位指令？</strong></p><ul><li>顺序执行：在PC加1后找。加1的含义：按顺序找到下一条指令；如果地址是按照字节编码的，所以要按照指令的长度上字节的长度，即如果指令的为4个字节，那么应该PC<em>加4</em> 。</li><li>改变顺序时，指令显式地给出下一条地址和条件转移指令。</li></ul><p><strong>条件测试方法</strong><br> ppt都写的什么鬼。没有结构。。</p><hr><p><strong>指令风格介绍</strong></p><p>从指令风格可以分为：</p><ul><li>stack型</li><li>Accumulator型</li><li>通用寄存器型</li><li>装入、存储型；load store型，比如RISC-V</li></ul><p>指令设计风格：</p><ul><li>CISC：复杂，用的多</li><li>RISC: 精简，效率高</li></ul><hr><p><strong>异常和中断</strong></p><p>CPU停止正在执行的程序，转到处理异常情况的程序。</p><p>分为：</p><ul><li>内部异常： <ul><li>硬故障中断：</li><li>程序性中断：各种<code>Exception</code> 的指令</li></ul></li><li>外部中断： <ul><li>在CPU外部发生的特殊事件，通过中断请求的信号，向CPU发送请求处理异常的信号。</li></ul></li></ul><p>异常的处理</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414115517513.png" alt="image-20250414115517513" tabindex="0" loading="lazy"><figcaption>image-20250414115517513</figcaption></figure><hr><p>这里还有几页ppt，但是没有讲，自己看。</p><h2 id="指令系统实例-risc-v架构" tabindex="-1"><a class="header-anchor" href="#指令系统实例-risc-v架构"><span>指令系统实例：RISC-V架构</span></a></h2><p>RISC-V 的模块化设计：</p><ul><li>核心模块：RI32I</li><li>拓展模块：RV32M等</li></ul><p>几种长度：</p><blockquote><p>指令长度，RI32G 和RI64G的指令长度都是16位。</p><p>机器的架构长度32/64：机器字长=通用寄存器长度=定点运算器的长度，设计硬件的时候，将大量的GPR的长度设计为32/64位</p><p>处理数据的长度</p><p>一个字节=8bit （地址可以按字节编码）</p></blockquote><p>以下是32位与64位机器、x86与x64架构的简要对比表格：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>32位机器（x86）</strong></th><th><strong>64位机器（x64）</strong></th></tr></thead><tbody><tr><td><strong>数据宽度</strong></td><td>一次处理32位数据</td><td>一次处理64位数据</td></tr><tr><td><strong>地址空间</strong></td><td>32位地址空间</td><td>64位地址空间</td></tr><tr><td><strong>指令集</strong></td><td>x86指令集</td><td>x64指令集（兼容x86）</td></tr></tbody></table><ul><li><strong>32位 vs 64位</strong>：主要是数据处理能力和内存支持的区别。</li><li><strong>x86 vs x64</strong>：x86是32位架构，x64是64位扩展架构，且兼容x86。</li></ul><hr><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418103150918.png" alt="image-20250418103150918" tabindex="0" loading="lazy"><figcaption>image-20250418103150918</figcaption></figure><p>在这里，X0代表的是固定的32个0（硬编码为0）。ABI是Aplication Binnary Interface</p><hr><h3 id="_32位的risc-v-指令风格" tabindex="-1"><a class="header-anchor" href="#_32位的risc-v-指令风格"><span>32位的RISC-V 指令风格</span></a></h3><p><strong>六种格式</strong>：</p><p>R-型为寄存器操作数指令，7+5+5+3+5+7；</p><p>I-型为短立即数或装入（Load）指令</p><p>S-型为存储（Store）指令</p><p>B-型为条件跳转指令 【B即branch，条件跳转】</p><p>U-型为长立即数操作指令 ：20位立即数</p><p>J-型为无条件跳转指令：Jump</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418104227961.png" alt="image-20250418104227961" tabindex="0" loading="lazy"><figcaption>image-20250418104227961</figcaption></figure><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250421101000621.png" alt="image-20250421101000621" tabindex="0" loading="lazy"><figcaption>image-20250421101000621</figcaption></figure><blockquote><p>这里的imm的位置如此地混乱是为了提高效率</p></blockquote><hr><p><strong>几个常见的缩写</strong>：</p><ul><li><strong>opcode：最末尾的7位！！</strong></li><li>rd ： rigister destination目标寄存器 <strong>【需要5位，因为有32个通用寄存器】</strong></li><li>rs1 rs2 ： rigister source源操作数的寄存器地址、【也是5位】</li><li>imm： immediate 立即数</li><li>funtc3和funct7，表示3为和7位功能码，<strong>和opcode一起定义指令的操作功能。</strong></li></ul><p>在这里，注意： 通用寄存器的地址都要对齐，比如rs2，rs1，rd都是对齐的5为位；</p><hr><h3 id="_16为risc-v的设计风格" tabindex="-1"><a class="header-anchor" href="#_16为risc-v的设计风格"><span>16为RISC-V的设计风格</span></a></h3><p>共有8种指令格式。与32位指令相比，16位指令中的一部分寄存器编号还是占5位。指令变短了，但还是32位架构，处理的还是32位数据，还是有32个通用寄存器。</p><p>为了缩短指令长度，操作码op、功能码funct、立即数imm和另一部分，寄存器编号的位数都减少了。每条16位指令都有功能完全相同的32位指令，在执行时由硬件先转换为32位指令再执行。<strong>目的是：缩短程序代码量，用少量时间换空间！</strong></p><hr><p>只能压缩：op，imm，和寄存器的个数；（寄存器编码的长度如果使用低于5位，肯定有解压缩的过程）</p><ul><li>16位的exe文件变短了，但是因为16位指令还是要转换成32位，因为最后的执行时间其实比32位更短。</li></ul><hr><h3 id="基础整数指令集-rv32i" tabindex="-1"><a class="header-anchor" href="#基础整数指令集-rv32i"><span>基础整数指令集 RV32I</span></a></h3><p><strong>RTL（Rigister Transfer Language）</strong></p><ul><li>R[r]：取出寄存器r中的内容。</li><li>M[addr]： 取出内存中addr的内容。</li><li>PC: PC地址指向的内容。</li><li>M[PC]：读取PC所指的地址的内容。</li><li>SEXT[imm]：Sign Extension,符号位扩展。</li><li>ZEXT[imm]：Zero Extension， 0扩展。</li></ul><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418105716660.png" alt="image-20250418105716660" style="zoom:50%;"><hr><p><strong>一个例子：</strong></p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418105918091.png" alt="image-20250418105918091" tabindex="0" loading="lazy"><figcaption>image-20250418105918091</figcaption></figure><p>在这里的I类指令，移位类指令，前6位用于区分是什么移位(左移，逻辑右移，算数右移)，shamt是5位，因为，每一个寄存器就是32位，</p><p>只需要5位shamt就能实现。</p><hr><p><strong>几个I型指令</strong></p><p>一个例子： <code>int a= -8191</code></p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418111855476.png" alt="image-20250418111855476" style="zoom:50%;"><p>因为 lui （load upper immediate）指令只有20位的立即数，因而只能将高20位送入（进行<strong>符号扩展SEXT</strong>），一个寄存器，之后再使用addi指令将低12位加入。</p><blockquote><p><strong>在ISA中，imm都是进行符号位扩展！</strong></p><hr></blockquote><p><strong>几个I型指令</strong>：</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418113233467.png" alt="image-20250418113233467" style="zoom:33%;"><hr><p><strong>R型指令</strong></p><ul><li>操作码opcode都是0110011，功能由funct3决定；</li></ul><p><strong>4条比较指令：带符号小于（slt、slti）、无符号小于（sltu、sltiu）</strong>：</p><ul><li>sltiu rd, rs1 imm12 按顺序，rs1和imm12比较，如果rs1小于imm12那么，rd中存入1，否则为0； （进行无符号比较）</li><li>无论是有符号比较还是无符号比较，都是要将imm12扩展为32位，才能进行比较。</li></ul><hr><p>对于指令的要求：</p><ul><li>能够看懂每一个指令的意义，谁和谁做运算，怎么做运算</li><li>能看将指令和汇编进行一一对应</li><li>区分谁是rd和rs</li></ul><hr><p>一个例子：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250421102816908.png" alt="image-20250421102816908" tabindex="0" loading="lazy"><figcaption>image-20250421102816908</figcaption></figure><p>为什么是这样的呢？ bne(branch not equal),将立即数40按照要求B类型指令的要求，将其组合上去。</p><hr><p><strong>内存访问指令</strong></p><p>load指令：R[rd]&lt;-M[R[rs1]+SEXT[imm[12]]</p><p>store指令：</p><p><strong>乘法和除法</strong></p><p>乘法指令: mul，mulh，mulhu，mulhsu<br> – mul rd, rs1, rs2：将低32位乘积存入结果寄存器rd<br> – mulh、mulhu：将两个乘数同时按带符号整数（mulh）、同时按无符号<br> 整数（mulhu）相乘，高32位乘积存入rd中<br> – mulhsu：将两个乘数分别作为带符号整数和无符号整数相乘后得到的高<br> 32位乘积存入rd中<br> – 得到64位乘积需要两条连续的指令，其中一定有一条是mul指令，实际执<br> 行时只有一条指令<br> – 两种乘法指令都不检测溢出, 而是直接把结果写入结果寄存器。由软件根据<br> 结果寄存器的值自行判断和处理溢出<br> 除法指令: div ，divu，rem，remu<br> – div / rem：按带符号整数做除法，得到商 / 余数<br> – divu / remu：按无符号整数做除法，得到商 / 余数<br> RISC-V指令不检测和发出异常，而是由系统软件自行处理</p>',130)]))}const r=t(l,[["render",o],["__file","chapter7指令计算集.html.vue"]]),s=JSON.parse('{"path":"/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/chapter7%E6%8C%87%E4%BB%A4%E8%AE%A1%E7%AE%97%E9%9B%86.html","title":"Chapter7 | 指令系统","lang":"zh-CN","frontmatter":{"title":"Chapter7 | 指令系统","date":"2025-04-18T00:00:00.000Z","description":"概述与指令系统设计 指令的执行过程 image-20250411114304240image-20250411114304240 一条指令必须明显或隐含包含的信息： 操作码：指定操作类型 (操作码长度：固定／可变) 源操作数参照：一个或多个源操作数所在的地址 （源操作数或其地址，由取址方式决定） (操作数来源：主(虚)存/寄存器/I/O端口/指令本身）...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/chapter7%E6%8C%87%E4%BB%A4%E8%AE%A1%E7%AE%97%E9%9B%86.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"Chapter7 | 指令系统"}],["meta",{"property":"og:description","content":"概述与指令系统设计 指令的执行过程 image-20250411114304240image-20250411114304240 一条指令必须明显或隐含包含的信息： 操作码：指定操作类型 (操作码长度：固定／可变) 源操作数参照：一个或多个源操作数所在的地址 （源操作数或其地址，由取址方式决定） (操作数来源：主(虚)存/寄存器/I/O端口/指令本身）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250411114304240.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T13:05:44.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T13:05:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Chapter7 | 指令系统\\",\\"image\\":[\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250411114304240.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414104410961.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414105327810.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250414115517513.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418103150918.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418104227961.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250421101000621.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250418105918091.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250421102816908.png\\"],\\"datePublished\\":\\"2025-04-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-27T13:05:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"概述与指令系统设计","slug":"概述与指令系统设计","link":"#概述与指令系统设计","children":[{"level":3,"title":"操作数类型和存储方式：","slug":"操作数类型和存储方式","link":"#操作数类型和存储方式","children":[]},{"level":3,"title":"指令格式","slug":"指令格式","link":"#指令格式","children":[]}]},{"level":2,"title":"指令系统实例：RISC-V架构","slug":"指令系统实例-risc-v架构","link":"#指令系统实例-risc-v架构","children":[{"level":3,"title":"32位的RISC-V 指令风格","slug":"_32位的risc-v-指令风格","link":"#_32位的risc-v-指令风格","children":[]},{"level":3,"title":"16为RISC-V的设计风格","slug":"_16为risc-v的设计风格","link":"#_16为risc-v的设计风格","children":[]},{"level":3,"title":"基础整数指令集 RV32I","slug":"基础整数指令集-rv32i","link":"#基础整数指令集-rv32i","children":[]}]}],"git":{"createdTime":1745218327000,"updatedTime":1745759144000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":2,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":9.16,"words":2747},"filePathRelative":"posts/NJUCS/数字逻辑与计算机组成/chapter7指令计算集.md","localizedDate":"2025年4月18日","excerpt":"<h2>概述与指令系统设计</h2>\\n<p><strong>指令的执行过程</strong></p>\\n<figure><img src=\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250411114304240.png\\" alt=\\"image-20250411114304240\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20250411114304240</figcaption></figure>\\n<p><strong>一条指令必须明显或隐含包含的信息</strong>：</p>","autoDesc":true}');export{r as comp,s as data};
