import{_ as i,c as a,d as n,o as e}from"./app-CekdgLtj.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="sicp笔记" tabindex="-1"><a class="header-anchor" href="#sicp笔记"><span>sicp笔记</span></a></h1><h2 id="考前注意" tabindex="-1"><a class="header-anchor" href="#考前注意"><span>!!!考前注意：</span></a></h2><ol><li>注意不要破坏抽象：比如scheme list要用对应的constructor和selector不要用car，cons</li><li>注意在继承的时候，能调用super().method就尽量调用</li><li>注意是list of lists 还是list！</li><li>降序排列是DESC，升序不用写</li><li>如果是print or repr 某一个由instance组成的list， 里面的每一个instance都会被repr作用；而不是str！！！！！！！！！</li><li>注意看题目要求要的是什么！不要只看doctest。</li></ol><h3 id="我的精神状态belike" tabindex="-1"><a class="header-anchor" href="#我的精神状态belike"><span>我的精神状态belike：</span></a></h3><figure><img src="https://img2024.cnblogs.com/blog/3578676/202412/3578676-20241231183714559-1474398211.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-the-difference-between-quoted-and-unquoted-string" tabindex="-1"><a class="header-anchor" href="#_1-the-difference-between-quoted-and-unquoted-string"><span>1.The difference between quoted and unquoted string</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hello world&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hello world </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#unquoted</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#It is the same if you want to look up an attribute of an </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        #instance(or class) and the attribute is a string;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hello world&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #quoted</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And one more strange thing:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __repr__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.x</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __str__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;10&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #注意这里不能是print(A(10))因为 str的返回值不能是非str的</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;10&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#inexplictly call __repr__</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">repr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;10&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#explictly call __repr__</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;10&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#经助教提醒后幡然醒悟：前面那个显示10并不意味着repr(A(&#39;10&#39;))为10，而是经过了Read-Eval-Print-Loop之后才显示为10。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-attribute-lookup" tabindex="-1"><a class="header-anchor" href="#_2-attribute-lookup"><span>2.Attribute lookup:</span></a></h2><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Car</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      pass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> electric_car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_charged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">electric_car</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Car.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_charged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(A) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Error!</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#search the function &#39;get_charged&#39; from the class Car, but failed.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">electric_car.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_charged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(A) </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#equals to A.get_chaeged()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-super-method-super-is-a-method-that-allows-you-to-call-the-method-of-superclass" tabindex="-1"><a class="header-anchor" href="#_3-super-method-super-is-a-method-that-allows-you-to-call-the-method-of-superclass"><span>3.Super method: &#39;super&#39; is a method that allows you to call the method of superclass.</span></a></h2><blockquote><p><strong>Method Binding</strong><br> When you call a method using super(), the method is bound to the current instance (i.e., self), not to the temporary proxy object. This is why the method has access to the instance’s attributes and can modify them. --from deepseek V3</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class electric_car(Car):</span></span>
<span class="line"><span>    def __init__(self):</span></span>
<span class="line"><span>        super().__init__()</span></span>
<span class="line"><span>#you don&#39;t have to take &#39;self&#39; as a parameter, because it is bound already</span></span>
<span class="line"><span>    def get_charged(self):</span></span>
<span class="line"><span>        pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>##4.Handle string format with for expression:</p><blockquote><p>hint: you are recommended to read the manual about string function like join, format ,zfill,and so on;</p></blockquote><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#example 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shift</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">ord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ch)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">ord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">26</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">ord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#shift all the letter back by x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#example 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> time_format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">month</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">day</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yy.mm.dd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(year)).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(month).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">zfill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(day).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">zfill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  original_str.replace(old_substr,new_str);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  str.zfill(width) =&gt; fill zeros ahead of the str;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#example 3</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fliiter_index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   #flitter out the letters whose indices are the multiple of x (excluding 0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str[index] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> or</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>##5. <strong>special method</strong><br> There are some special methods like &#39;<strong>radd</strong>&#39;,&#39;<strong>rsub</strong>&#39;, but when they are called?</p><blockquote><p>These methods are called to implement the binary arithmetic operations (+, -, *, @, /, //, %, divmod(), pow(), **, &lt;&lt;, &gt;&gt;, &amp;, ^, |) with reflected (swapped) operands. These functions are only called if the left operand does not support the corresponding operation 3 and the operands are of different types. 4 For instance, to evaluate the expression x - y, where y is an instance of a class that has an <strong>rsub</strong>() method, y.<strong>rsub</strong>(x) is called if x.<strong>sub</strong>(y) returns NotImplemented.<br><a href="">https://docs.python.org/3.9/reference/datamodel.html?highlight=radd#object.<strong>radd</strong></a></p></blockquote><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">num</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __add__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">other.num)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __radd__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">other.num)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __str__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;the value is </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> num2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">num</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __add__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">other.num)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __radd__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">other.n)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">num2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n2)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># the value is 3</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n1)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># the value is 4</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># first: check if the __add__ method of the left operand is able to work</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># second: if them are the same type, then an error occurs (it&#39;s no use even if you change their position) otherwise, the __radd__ method of the right operand is called</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-scheme" tabindex="-1"><a class="header-anchor" href="#_6-scheme"><span>6.Scheme</span></a></h2><ul><li>Everything is considered <code>#t</code> (true) except <code>#f</code> (false).</li><li><code>or</code> evaluates its arguments from left to right and returns the first truthy value.<br> If all arguments evaluate to <code>#f</code>, it returns <code>#f</code>.</li><li><code>and</code> evaluates its arguments from left to right and returns the first falsy value.<br> If all arguments are truthy, it returns the last truthy value.</li><li>use <code>eq?</code> or <code>equal?</code> to compare symbol and number; <code>=</code> can only be used to compare number!</li><li><code>pair?</code>:return <code>#t</code> when operand is a pair (or list); In python we use<code> isinstance(lnk,Link)</code></li></ul><p>##7.Interpreter</p><ul><li>REPL:&#39;read-eval-print-loop&#39;</li><li>environment is often representated as a dictionary;<br> To check if the dict has key &#39;a&#39; use:<code>a in dict.keys()</code><br> To add a new key-value bound or change the value use: <code>dict[key]=value</code><br> To delete a key-value bound use: <code>del dict[k]</code></li></ul><h2 id="_8-define-macro-in-scheme" tabindex="-1"><a class="header-anchor" href="#_8-define-macro-in-scheme"><span>8.Define Macro in Scheme</span></a></h2><h3 id="the-ensence-of-marco-procedure-code-transformation" tabindex="-1"><a class="header-anchor" href="#the-ensence-of-marco-procedure-code-transformation"><span>The ensence of marco procedure: Code Transformation</span></a></h3><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define-macro (f x) (+ x 2))</span></span>
<span class="line"><span>(f (+ 2 3))</span></span>
<span class="line"><span>(define-macro (g x) (list &#39;+ x 2))</span></span>
<span class="line"><span>(g (+ 2 3)）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(f (+ 2 3))</code> will apply the macro function f with the value <code>&#39;(+ 2 3)</code> as <code>x</code>. It will try to <code>(+ &#39;(+ 2 3) 2)</code> of which the result is the new code that replaces the whole <code>(f (+ 2 3))</code> entirely. However + cannot add a list to a number so it makes no sense to create a macro like that.</p><blockquote><p>######Take the source code as-is(add a quotation before it so when it is changed and evaled it is represented as-is)</p></blockquote><p><code>(g (+ 2 3))</code> will apply the macro function g with the value <code>&#39;(+ 2 3)</code> as <code>x</code>. It will try to <code>(list &#39;+ &#39;(+ 2 3) 2))</code> of which the result is <code>(+ (+ 2 3) 2)</code>. This is then put verbatim at the code location of <code>(g (+ 2 3))</code> as if it has always been <code>(+ (+ 2 3) 2)</code> all along before the program starts executing. It works because <code>(+ (+ 2 3) 2)</code> is a valid expression.</p><h2 id="_9-scheme-list" tabindex="-1"><a class="header-anchor" href="#_9-scheme-list"><span>9. Scheme List</span></a></h2><p>Problem 1: Count Change III (100 pts)<br> Write a procedure make-change, which takes in positive integers total and biggest and outputs a list of lists, in which each inner list contains positive numbers no larger than biggest that sum to total.</p><blockquote><p>Note: Both outer list and inner lists should be descending ordered.<br> Hint: You may find Scheme built-in procedure append useful.</p></blockquote><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (make-change total biggest)</span></span>
<span class="line"><span>  &#39;YOUR-CODE-HERE</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>;;; Tests</span></span>
<span class="line"><span>; scm&gt; (make-change 2 2)</span></span>
<span class="line"><span>; ((2) (1 1))</span></span>
<span class="line"><span>; scm&gt; (make-change 3 3)</span></span>
<span class="line"><span>; ((3) (2 1) (1 1 1))</span></span>
<span class="line"><span>; scm&gt; (make-change 4 3)</span></span>
<span class="line"><span>; ((3 1) (2 2) (2 1 1) (1 1 1 1))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Solution</strong>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (make-change total biggest)</span></span>
<span class="line"><span>  (cond ((= total 0) &#39;(()) )       ;A right path </span></span>
<span class="line"><span>    (or (&lt; total) (= biggest 0) &#39;() ) ;Invalid path, should be ingnored</span></span>
<span class="line"><span>    (else</span></span>
<span class="line"><span>        (let ((with (map (lambda (lst) (cons biggest lst)) (make-change (- total biggest) biggest) )  ) </span></span>
<span class="line"><span>         (without (make-change total (- biggest 1))))</span></span>
<span class="line"><span>        (append with without)</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-scheme-macro" tabindex="-1"><a class="header-anchor" href="#_10-scheme-macro"><span>10. Scheme Macro</span></a></h2><blockquote><p>由于尚未完全掌握 暂时不完全展示</p></blockquote><hr><h2 id="_11-scheme-stream" tabindex="-1"><a class="header-anchor" href="#_11-scheme-stream"><span>11. Scheme Stream</span></a></h2><ul><li><strong>A Speacial data type</strong></li></ul><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>;the following are the constructor and selector of Stream:</span></span>
<span class="line"><span>(define (cons-stream first rest)</span></span>
<span class="line"><span>    (cons first (delay rest))</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>(define (cdr-stream s)</span></span>
<span class="line"><span>(force (cdr s))</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>More demo</summary><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (constant-stream i) (cons-stream i (constant-stream i)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (slice s start end)</span></span>
<span class="line"><span>    (if  (and (&lt; start end) (not (null? s)) )</span></span>
<span class="line"><span>         (if (and (= 0 start))</span></span>
<span class="line"><span>            (cons (car s) (slice (cdr-stream s) start (- end 1)) )</span></span>
<span class="line"><span>            (slice (cdr-stream s) (- start 1) (- end 1))</span></span>
<span class="line"><span>            )        </span></span>
<span class="line"><span>        nil</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (add-stream s1 s2) </span></span>
<span class="line"><span>    (cond </span></span>
<span class="line"><span>        ((null? s1) s2)</span></span>
<span class="line"><span>        ((null? s2) s1)</span></span>
<span class="line"><span>        (else (cons-stream (+ (car s1) (car s2)) (add-stream  (cdr-stream s1) (cdr-stream s2) )) )</span></span>
<span class="line"><span>     )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (merge-stream s1 s2)</span></span>
<span class="line"><span>    (cond </span></span>
<span class="line"><span>         ((null? s1) s2)</span></span>
<span class="line"><span>         ((null? s2) s1)</span></span>
<span class="line"><span>         (else </span></span>
<span class="line"><span>            (if (&gt; (car s1) (car s2))</span></span>
<span class="line"><span>                (cons-stream (car s2) (merge-stream (cdr-stream s2) s1))</span></span>
<span class="line"><span>                (cons-stream (car s1) (merge-stream (cdr-stream s1) s2))</span></span>
<span class="line"><span>            )   </span></span>
<span class="line"><span>         )</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (map-stream fn stream )</span></span>
<span class="line"><span>    (if (null? stream)</span></span>
<span class="line"><span>        nil</span></span>
<span class="line"><span>        (cons-stream (fn (car stream)) (map-stream fn (cdr-stream stream)))</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (filter-stream fn stream)</span></span>
<span class="line"><span>    (if (null? stream) nil</span></span>
<span class="line"><span>        (if (fn (car stream))</span></span>
<span class="line"><span>            (cons-stream (car stream) (filter-stream fn (cdr-stream stream)))</span></span>
<span class="line"><span>            (filter-stream fn (cdr-stream stream))</span></span>
<span class="line"><span>        )    </span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(define (nats start) (cons-stream start (nats (+ start 1))))</span></span>
<span class="line"><span>(define natuals (nats 0))</span></span>
<span class="line"><span>(define ones (constant-stream 1))</span></span>
<span class="line"><span>(define s1 (cons-stream 1 (cons-stream 2 (cons-stream 3 (cons-stream 4 nil)))))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>What &#39;s wrong with the code?</li></ul><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (filter-stream f s)</span></span>
<span class="line"><span>  (if (null? s) nil</span></span>
<span class="line"><span>      (let ((rest (filter-stream f (cdr-stream s))))</span></span>
<span class="line"><span>        (if (f (car s))</span></span>
<span class="line"><span>            (cons-stream (car s) rest)</span></span>
<span class="line"><span>            rest))))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Tips</strong>: To get <code>rest</code> you have to get the result of the recursive call <code>(filter-stream f (cdr-stream s)))</code>, so it is not a lazy evaluation.</p></blockquote><ul><li><p>The most beautiful part of Stream lies in its power of creation: you can design many streams by some simple streams<br> Take <code>factorial</code> as an example:<br> We konw the factorials of naturals are 1 1 2 6 24 120...(start by 0!)<br> Given a stream of nuturals :1 2 3 4 5 ...<br> And we may found that if we combine the two streams by multiple their corresponding element, we may get a new stream :1 2 6 24 120 720.... (1 * 1=1, 1 * 2=2, 2 * 3=6...)<br> And apperently, it is just part of the factorial stream,<br> so the factorail stream can be defined recursively:</p><ul><li>the first element is 1</li><li>the rest are the <code>combination</code> of stream <code>naturals</code> and the stream <code>factorials</code></li></ul></li></ul><blockquote><p>It&#39;s Beautiful! Right?</p></blockquote><p>更一般地：</p><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  （define sum-stream </span></span>
<span class="line"><span>      (cons-stream (car an-stream)  </span></span>
<span class="line"><span>          (add-stream sum-stream (cdr-stream an-stream)</span></span>
<span class="line"><span>      )</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>;即,Sn+1=Sn+an+1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>More demos</strong>:</li></ul><p>#Problem 4: Non Decreasing (100 pts)<br> Define a function nondecrease, which takes in a scheme stream of numbers and outputs a stream of lists, which overall has the same numbers in the same order, but grouped into lists that are non-decreasing.</p><p>For example, if the input is a stream containing elements</p><p>(1 2 3 4 1 2 3 4 1 1 1 2 1 1 0 4 3 2 1)<br> the output should contain elements</p><p>((1 2 3 4) (1 2 3 4) (1 1 1 2) (1 1) (0 4) (3) (2) (1))<br> Your solution may handle infinite streams correctly, which means if an infinite streams is always non-decreasing after the nth element, and from the 0th to the n - 1th element can group to m non-decreasing sublists, your solution can output the first m sublists correctly.</p><p>(define (nondecrease s)<br> &#39;YOUR-CODE-HERE<br> )</p><p>;;; Tests<br> ; scm&gt; (define s (list-to-stream &#39;(1 2 3 4 1 2 3 4 1 1 1 2 1 1 0 4 3 2 1))) ; a helper function to make stream from list<br> ; s<br> ; scm&gt; (slice (nondecrease s) 0 8)<br> ; ((1 2 3 4) (1 2 3 4) (1 1 1 2) (1 1) (0 4) (3) (2) (1))</p><details><summary>solution1</summary><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (non-decreasing stream)</span></span>
<span class="line"><span>    (cond ( (null? stream) (cons-stream nil ni) )</span></span>
<span class="line"><span>        ( (null? (cdr-stream stream)) (cons-stream (cons (car stream) nil) nil))</span></span>
<span class="line"><span>        (else </span></span>
<span class="line"><span>            (let ((next (non-decreasing (cdr-stream stream))))</span></span>
<span class="line"><span>                (if (&lt;= (car stream) (car (car next)))</span></span>
<span class="line"><span>                    (cons-stream (cons (car stream) (car next))  (cdr-stream next))</span></span>
<span class="line"><span>                    (cons-stream (cons (car stream) nil) next)</span></span>
<span class="line"><span>                    )     </span></span>
<span class="line"><span>            )</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>The main idea of solution one is take out the first element(<code>car stream</code>) and &#39;add&#39; it to the result without it(recursively,<code>(non-decreasing (cdr-stream s)</code>)</p></blockquote><details><summary>solution2 from chatgpt</summary><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(define (non-decreasing stream) </span></span>
<span class="line"><span>    (define (take-group stream)</span></span>
<span class="line"><span>        (cond ((null? stream) nil)</span></span>
<span class="line"><span>               ((null? (cdr-stream stream)) (cons (car stream) nil))</span></span>
<span class="line"><span>            (else (if (&lt;= (car stream) (car (cdr-stream stream) ) ) </span></span>
<span class="line"><span>                         (cons (car stream) (take-group (cdr-stream stream)))</span></span>
<span class="line"><span>                         (cons (car stream)  nil)</span></span>
<span class="line"><span>                    ))</span></span>
<span class="line"><span>        )    </span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>    (define (next-stream stream)</span></span>
<span class="line"><span>            (cond ((null? stream) nil)</span></span>
<span class="line"><span>                  ((null? (cdr-stream stream)) stream )</span></span>
<span class="line"><span>                  ((&lt; (car stream) (car (cdr-stream stream))) (next-stream (cdr-stream stream)) )</span></span>
<span class="line"><span>                  (else (cdr-stream stream))</span></span>
<span class="line"><span>                  )</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>    (if (null? (take-group stream)) nil (cons-stream (take-group stream) (non-decreasing (next-stream stream))))</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>Main idea: <code>take-group</code> from the current stream and recursively take the group from the <code>next-stream</code></p></blockquote><p>##12. SQL</p><ul><li><p>Create a tabel:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;content&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> coulmn_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UNION</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Select:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column LIMINT maximun_num</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在ORDER BY col 后面可以加上 ASC或DESC，否则默认ASC；</p></li><li><p>Joining tabels:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> col </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table1,table2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition.....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Aggregation</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">1.GROUP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BY </span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2.COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):计算所有列数，</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DISTINCT </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">col</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)计算不同col那一列地不同值的个数</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">3.MAX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(col),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">col</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Some common Aggregation function:</strong><br><img src="https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103083236722-333088327.png" alt="" loading="lazy"></p></li></ul><p>##14. Others</p><ul><li><p>Scheme Diagram:</p></li><li><p>Draw Lists:</p><ul><li>自行体会：<br><img src="https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103085651349-898535439.png" alt="" loading="lazy"></li></ul></li><li><p>Environment, Frame:<br> Notice： Whenever you call a function, you create a new frame, whose parent is the frame where the function is defined. In the following example, the function <code>make-adder</code> is defined in the global frame, when call the function by <code>(make-adder 3)</code>, a new frame <code>f1</code> is created and returnd a lambda function (defined in <code>f1</code>). And later when you call the function <code>add-three</code> which is bound to the lambda function, new frames are created, more specifically <code>f2</code> and <code>f3</code>.The parent frame of <code>f2</code> and <code>f3</code> is <code>f1</code>, because the lambda is define in <code>f1</code>;</p></li></ul><blockquote><p>But <code>add-there</code> is defined in Global Frame, why is their parent frame not the Global Frame? When evaluating the call expression, the operator is evaluated first, which results in a lambda procedure. Therefore the parent frame of the function call is the frame in which the lambda procedure was defined.</p></blockquote><figure><img src="https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103090205733-663837540.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Some Scheme procedure/SQL function often ignored: <ul><li><code>modulo</code> 取模</li><li><code>quotident</code> 整除</li><li><code>equal?</code> or <code>eq?</code> 用于比较数字和非数字是否相等(<code>=</code>只用作数字之间的比较)</li><li><code>Round</code> (SQL aggregation Function) 四舍五入</li><li><code>AVG</code> (SQL aggregation Function) 对group取平均值，注意，如果没有用GROUP BY 但是用了aggregation function，则认为是对整个的table当成是一个group；</li></ul></li></ul><h2 id="_15-interpreter" tabindex="-1"><a class="header-anchor" href="#_15-interpreter"><span>15. Interpreter</span></a></h2><ul><li>Counting：考试会考！ <ul><li>这个是built-in procedure<br><img src="https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103094500138-224050086.png" alt="" loading="lazy"></li><li>这个是 user-defined procudure(<code>LambdaProcedure</code>)<br><img src="https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103094635619-1657772481.png" alt="" loading="lazy"></li></ul></li></ul><blockquote><p>Pay attention to the eval process: you have to eval the exprssion in the body of the function.</p></blockquote><ul><li>WWSP</li></ul><div class="language-scm line-numbers-mode" data-highlighter="shiki" data-ext="scm" data-title="scm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt;&gt;&gt;scm (cons &#39;(car) &#39;(&#39;(1 2)))</span></span>
<span class="line"><span> (car (quote (1 2)))</span></span>
<span class="line"><span>;解释：&#39;(car) -&gt;Pair(car) &#39;(&#39;(1 2))-&gt;Pair(Pair(quote, Pair(1, Pair(2,nil))))</span></span>
<span class="line"><span>当调用cons的时候，需要先eval operand，分别得到car和Pair(quote,Pair(1, Pair(2, nil)))</span></span>
<span class="line"><span>再用cons创建一个pair-&gt; Pair(car, Pair(quote, Pair(1, Pair(2,nil))))</span></span>
<span class="line"><span>&gt;&gt;(eval (cons &#39;(car) &#39;(&#39;(1 2))) )</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>;解释，在上述的基础上再调用eval，发现Pair第一个是procedure（car）,因此按function call来，分别evaluate opertor 和operand，期中operand得到(1 2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75)]))}const r=i(l,[["render",t],["__file","sicp笔记.html.vue"]]),d=JSON.parse(`{"path":"/posts/python%E5%AD%A6%E4%B9%A0/sicp%E7%AC%94%E8%AE%B0.html","title":"sicp笔记","lang":"zh-CN","frontmatter":{"date":"2025-01-18T00:00:00.000Z","description":"sicp笔记 !!!考前注意： 注意不要破坏抽象：比如scheme list要用对应的constructor和selector不要用car，cons 注意在继承的时候，能调用super().method就尽量调用 注意是list of lists 还是list！ 降序排列是DESC，升序不用写 如果是print or repr 某一个由instance...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/python%E5%AD%A6%E4%B9%A0/sicp%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"sicp笔记"}],["meta",{"property":"og:description","content":"sicp笔记 !!!考前注意： 注意不要破坏抽象：比如scheme list要用对应的constructor和selector不要用car，cons 注意在继承的时候，能调用super().method就尽量调用 注意是list of lists 还是list！ 降序排列是DESC，升序不用写 如果是print or repr 某一个由instance..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2024.cnblogs.com/blog/3578676/202412/3578676-20241231183714559-1474398211.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-15T02:57:35.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-15T02:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sicp笔记\\",\\"image\\":[\\"https://img2024.cnblogs.com/blog/3578676/202412/3578676-20241231183714559-1474398211.jpg\\",\\"https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103083236722-333088327.png\\",\\"https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103085651349-898535439.png\\",\\"https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103090205733-663837540.png\\",\\"https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103094500138-224050086.png\\",\\"https://img2024.cnblogs.com/blog/3578676/202501/3578676-20250103094635619-1657772481.png\\"],\\"datePublished\\":\\"2025-01-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-15T02:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"!!!考前注意：","slug":"考前注意","link":"#考前注意","children":[{"level":3,"title":"我的精神状态belike：","slug":"我的精神状态belike","link":"#我的精神状态belike","children":[]}]},{"level":2,"title":"1.The difference between quoted and unquoted string","slug":"_1-the-difference-between-quoted-and-unquoted-string","link":"#_1-the-difference-between-quoted-and-unquoted-string","children":[]},{"level":2,"title":"2.Attribute lookup:","slug":"_2-attribute-lookup","link":"#_2-attribute-lookup","children":[]},{"level":2,"title":"3.Super method: 'super' is a method that allows you to call the method of superclass.","slug":"_3-super-method-super-is-a-method-that-allows-you-to-call-the-method-of-superclass","link":"#_3-super-method-super-is-a-method-that-allows-you-to-call-the-method-of-superclass","children":[]},{"level":2,"title":"6.Scheme","slug":"_6-scheme","link":"#_6-scheme","children":[]},{"level":2,"title":"8.Define Macro in Scheme","slug":"_8-define-macro-in-scheme","link":"#_8-define-macro-in-scheme","children":[{"level":3,"title":"The ensence of marco procedure: Code Transformation","slug":"the-ensence-of-marco-procedure-code-transformation","link":"#the-ensence-of-marco-procedure-code-transformation","children":[]}]},{"level":2,"title":"9. Scheme List","slug":"_9-scheme-list","link":"#_9-scheme-list","children":[]},{"level":2,"title":"10. Scheme Macro","slug":"_10-scheme-macro","link":"#_10-scheme-macro","children":[]},{"level":2,"title":"11. Scheme Stream","slug":"_11-scheme-stream","link":"#_11-scheme-stream","children":[]},{"level":2,"title":"15. Interpreter","slug":"_15-interpreter","link":"#_15-interpreter","children":[]}],"git":{"createdTime":1736926918000,"updatedTime":1739588255000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":3,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":8.78,"words":2633},"filePathRelative":"posts/python学习/sicp笔记.md","localizedDate":"2025年1月18日","excerpt":"\\n<h2>!!!考前注意：</h2>\\n<ol>\\n<li>注意不要破坏抽象：比如scheme list要用对应的constructor和selector不要用car，cons</li>\\n<li>注意在继承的时候，能调用super().method就尽量调用</li>\\n<li>注意是list of lists 还是list！</li>\\n<li>降序排列是DESC，升序不用写</li>\\n<li>如果是print or repr 某一个由instance组成的list， 里面的每一个instance都会被repr作用；而不是str！！！！！！！！！</li>\\n<li>注意看题目要求要的是什么！不要只看doctest。</li>\\n</ol>","autoDesc":true}`);export{r as comp,d as data};
