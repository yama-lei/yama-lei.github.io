import{_ as s,c as a,d as t,o as e}from"./app-CeypbMp0.js";const n={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[t(`<p>盐都不盐了。</p><p>很好，下面我会<strong>系统地介绍如何设计一个碰撞系统（Collision System）</strong>，包括其基本概念、在 Qt 中用到的接口、经典设计思路，并穿插示例代码。</p><hr><h2 id="🧠-一、碰撞系统的核心目标" tabindex="-1"><a class="header-anchor" href="#🧠-一、碰撞系统的核心目标"><span>🧠 一、碰撞系统的核心目标</span></a></h2><p>让<strong>场景中的对象（物体）能够感知和响应彼此的接触关系</strong>，常见的目标包括：</p><ul><li>防止角色穿透地图（边界/障碍检测）</li><li>玩家拾取道具</li><li>子弹打中敌人</li><li>人物之间交互</li></ul><hr><h2 id="🧩-二、核心概念" tabindex="-1"><a class="header-anchor" href="#🧩-二、核心概念"><span>🧩 二、核心概念</span></a></h2><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><strong>碰撞检测（Detection）</strong></td><td>判断两个对象是否接触</td></tr><tr><td><strong>碰撞响应（Response）</strong></td><td>接触之后做什么，例如拾取、弹开、伤害等</td></tr><tr><td><strong>碰撞体（Hitbox）</strong></td><td>用于判断碰撞的区域，可以是矩形、圆形或复杂多边形</td></tr><tr><td><strong>空间分区优化（高级）</strong></td><td>避免每一帧检测全部物体，提高效率</td></tr></tbody></table><hr><h2 id="🔧-三、qt-提供的关键接口" tabindex="-1"><a class="header-anchor" href="#🔧-三、qt-提供的关键接口"><span>🔧 三、Qt 提供的关键接口</span></a></h2><h3 id="✅-qgraphicsitem-collidingitems" tabindex="-1"><a class="header-anchor" href="#✅-qgraphicsitem-collidingitems"><span>✅ <code>QGraphicsItem::collidingItems()</code></span></a></h3><ul><li>返回当前 item 和其他 item 的所有重叠项（使用形状判定）</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QList</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QGraphicsItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> collided </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collidingItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="✅-qgraphicsitem-shape-或-boundingrect" tabindex="-1"><a class="header-anchor" href="#✅-qgraphicsitem-shape-或-boundingrect"><span>✅ <code>QGraphicsItem::shape()</code> 或 <code>boundingRect()</code></span></a></h3><ul><li>默认使用 <code>shape()</code> 判定碰撞，如果你不重写，默认是 <code>boundingRect()</code> 的形状。</li><li>你可以更细致地定义碰撞区域，例如圆形、路径、多边形等。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QPainterPath</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> MyItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QPainterPath path;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEllipse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 圆形碰撞体</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> path;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-类型判断接口" tabindex="-1"><a class="header-anchor" href="#✅-类型判断接口"><span>✅ 类型判断接口</span></a></h3><ul><li>用于判定碰撞到的 item 的类型：</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;"> dynamic_cast</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HealthItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(other)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">consume</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">qgraphicsitem_cast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HealthItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(other)) { ... }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🧱-四、碰撞系统设计思路-面向对象" tabindex="-1"><a class="header-anchor" href="#🧱-四、碰撞系统设计思路-面向对象"><span>🧱 四、碰撞系统设计思路（面向对象）</span></a></h2><h3 id="_1-抽象基类-item" tabindex="-1"><a class="header-anchor" href="#_1-抽象基类-item"><span>1. <strong>抽象基类</strong> <code>Item</code></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QGraphicsPixmapItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Q_OBJECT</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onPickup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Player</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-子类实现具体效果" tabindex="-1"><a class="header-anchor" href="#_2-子类实现具体效果"><span>2. <strong>子类实现具体效果</strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HealthItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onPickup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Player</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addHealth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        scene</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">removeItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        delete</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-gamescene-或-player-检查碰撞" tabindex="-1"><a class="header-anchor" href="#_3-gamescene-或-player-检查碰撞"><span>3. <strong>GameScene 或 Player 检查碰撞</strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">checkCollision</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QList</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QGraphicsItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> items </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> collidingItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (QGraphicsItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item : items) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> prop </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;"> dynamic_cast</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Item</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            prop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onPickup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🕹-五、边界检测与阻挡处理" tabindex="-1"><a class="header-anchor" href="#🕹-五、边界检测与阻挡处理"><span>🕹 五、边界检测与阻挡处理</span></a></h2><p>你已经做了一部分，我们可以统一封装成一个函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">moveWithBoundary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QPointF</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QRectF</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QPointF newPos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> step;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newPos)) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newPos);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 限制越界</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">qBound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">newPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">qBound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">newPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bottom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newPos);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="⚙-六、进阶功能-可选" tabindex="-1"><a class="header-anchor" href="#⚙-六、进阶功能-可选"><span>⚙ 六、进阶功能（可选）</span></a></h2><table><thead><tr><th>功能</th><th>实现方式</th></tr></thead><tbody><tr><td>多种碰撞体形状</td><td>重写 <code>shape()</code></td></tr><tr><td>动态生成道具</td><td><code>scene-&gt;addItem(new HealthItem(...))</code></td></tr><tr><td>伤害判定/血量管理</td><td>在 <code>Player</code> 里加入 <code>hp</code> 字段与伤害函数</td></tr><tr><td>空间分区优化</td><td>使用四叉树（适合大型地图）</td></tr></tbody></table><hr><h2 id="🧪-示例-拾取道具完整流程" tabindex="-1"><a class="header-anchor" href="#🧪-示例-拾取道具完整流程"><span>🧪 示例：拾取道具完整流程</span></a></h2><ol><li>玩家移动后调用 <code>checkCollision()</code></li><li>玩家检测到与 <code>Item</code> 类型碰撞</li><li>调用 <code>item-&gt;onPickup(player)</code></li><li>Item 响应后 <code>delete this</code></li></ol><hr><h2 id="📚-推荐你学习的接口-类" tabindex="-1"><a class="header-anchor" href="#📚-推荐你学习的接口-类"><span>📚 推荐你学习的接口 / 类</span></a></h2><table><thead><tr><th>类</th><th>用途</th></tr></thead><tbody><tr><td><code>QGraphicsItem</code></td><td>所有物体的基类</td></tr><tr><td><code>QGraphicsScene</code></td><td>管理所有物体</td></tr><tr><td><code>QGraphicsView</code></td><td>显示场景</td></tr><tr><td><code>QTimer</code></td><td>帧更新</td></tr><tr><td><code>QElapsedTimer</code></td><td>计时器</td></tr><tr><td><code>QPainterPath</code></td><td>用于自定义碰撞区域</td></tr><tr><td><code>dynamic_cast</code> / <code>qgraphicsitem_cast</code></td><td>类型识别</td></tr></tbody></table><hr><p>需要我为你写一个 <code>Item</code> + <code>HealthItem</code> 的最小工作示例吗？可以直接拿来添加到你游戏里使用。</p>`,45)]))}const p=s(n,[["render",l],["__file","qt入门tutorial-第四节.html.vue"]]),d=JSON.parse('{"path":"/posts/c__%E5%BC%80%E5%8F%91/qt%E5%85%A5%E9%97%A8tutorial-%E7%AC%AC%E5%9B%9B%E8%8A%82.html","title":"qt开发入门tutorial-第四节","lang":"zh-CN","frontmatter":{"date":"2025-04-20T00:00:00.000Z","title":"qt开发入门tutorial-第四节","description":"盐都不盐了。 很好，下面我会系统地介绍如何设计一个碰撞系统（Collision System），包括其基本概念、在 Qt 中用到的接口、经典设计思路，并穿插示例代码。 🧠 一、碰撞系统的核心目标 让场景中的对象（物体）能够感知和响应彼此的接触关系，常见的目标包括： 防止角色穿透地图（边界/障碍检测） 玩家拾取道具 子弹打中敌人 人物之间交互 🧩 二...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/c__%E5%BC%80%E5%8F%91/qt%E5%85%A5%E9%97%A8tutorial-%E7%AC%AC%E5%9B%9B%E8%8A%82.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"qt开发入门tutorial-第四节"}],["meta",{"property":"og:description","content":"盐都不盐了。 很好，下面我会系统地介绍如何设计一个碰撞系统（Collision System），包括其基本概念、在 Qt 中用到的接口、经典设计思路，并穿插示例代码。 🧠 一、碰撞系统的核心目标 让场景中的对象（物体）能够感知和响应彼此的接触关系，常见的目标包括： 防止角色穿透地图（边界/障碍检测） 玩家拾取道具 子弹打中敌人 人物之间交互 🧩 二..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-03T07:14:16.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-03T07:14:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"qt开发入门tutorial-第四节\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-03T07:14:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"🧠 一、碰撞系统的核心目标","slug":"🧠-一、碰撞系统的核心目标","link":"#🧠-一、碰撞系统的核心目标","children":[]},{"level":2,"title":"🧩 二、核心概念","slug":"🧩-二、核心概念","link":"#🧩-二、核心概念","children":[]},{"level":2,"title":"🔧 三、Qt 提供的关键接口","slug":"🔧-三、qt-提供的关键接口","link":"#🔧-三、qt-提供的关键接口","children":[{"level":3,"title":"✅ QGraphicsItem::collidingItems()","slug":"✅-qgraphicsitem-collidingitems","link":"#✅-qgraphicsitem-collidingitems","children":[]},{"level":3,"title":"✅ QGraphicsItem::shape() 或 boundingRect()","slug":"✅-qgraphicsitem-shape-或-boundingrect","link":"#✅-qgraphicsitem-shape-或-boundingrect","children":[]},{"level":3,"title":"✅ 类型判断接口","slug":"✅-类型判断接口","link":"#✅-类型判断接口","children":[]}]},{"level":2,"title":"🧱 四、碰撞系统设计思路（面向对象）","slug":"🧱-四、碰撞系统设计思路-面向对象","link":"#🧱-四、碰撞系统设计思路-面向对象","children":[{"level":3,"title":"1. 抽象基类 Item","slug":"_1-抽象基类-item","link":"#_1-抽象基类-item","children":[]},{"level":3,"title":"2. 子类实现具体效果","slug":"_2-子类实现具体效果","link":"#_2-子类实现具体效果","children":[]},{"level":3,"title":"3. GameScene 或 Player 检查碰撞","slug":"_3-gamescene-或-player-检查碰撞","link":"#_3-gamescene-或-player-检查碰撞","children":[]}]},{"level":2,"title":"🕹 五、边界检测与阻挡处理","slug":"🕹-五、边界检测与阻挡处理","link":"#🕹-五、边界检测与阻挡处理","children":[]},{"level":2,"title":"⚙ 六、进阶功能（可选）","slug":"⚙-六、进阶功能-可选","link":"#⚙-六、进阶功能-可选","children":[]},{"level":2,"title":"🧪 示例：拾取道具完整流程","slug":"🧪-示例-拾取道具完整流程","link":"#🧪-示例-拾取道具完整流程","children":[]},{"level":2,"title":"📚 推荐你学习的接口 / 类","slug":"📚-推荐你学习的接口-类","link":"#📚-推荐你学习的接口-类","children":[]}],"git":{"createdTime":1746256456000,"updatedTime":1746256456000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":1,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":2.47,"words":742},"filePathRelative":"posts/c++开发/qt入门tutorial-第四节.md","localizedDate":"2025年4月20日","excerpt":"<p>盐都不盐了。</p>\\n<p>很好，下面我会<strong>系统地介绍如何设计一个碰撞系统（Collision System）</strong>，包括其基本概念、在 Qt 中用到的接口、经典设计思路，并穿插示例代码。</p>\\n<hr>\\n<h2>🧠 一、碰撞系统的核心目标</h2>\\n<p>让<strong>场景中的对象（物体）能够感知和响应彼此的接触关系</strong>，常见的目标包括：</p>\\n<ul>\\n<li>防止角色穿透地图（边界/障碍检测）</li>\\n<li>玩家拾取道具</li>\\n<li>子弹打中敌人</li>\\n<li>人物之间交互</li>\\n</ul>\\n<hr>\\n<h2>🧩 二、核心概念</h2>","autoDesc":true}');export{p as comp,d as data};
