import{_ as s,c as g,d as e,e as o,g as t,b as i,r as p,o as r,f as a}from"./app-DMEPeXCB.js";const c={};function m(d,n){const l=p("center");return r(),g("div",null,[n[7]||(n[7]=e('<h2 id="第一讲-组合逻辑电路概述" tabindex="-1"><a class="header-anchor" href="#第一讲-组合逻辑电路概述"><span>第一讲 | 组合逻辑电路概述</span></a></h2><p>数字逻辑电路分为<strong>组合逻辑电路</strong>和<strong>时序逻辑电路</strong></p><ul><li>组合逻辑电路：输出只依赖于输入</li><li>时序逻辑电路：输出和输入、电路状态有关</li></ul><blockquote><ol><li>CPU是时序逻辑电路</li><li>组合逻辑电路和时序逻辑电路混在一起用也是时序逻辑电路</li></ol></blockquote><h3 id="组合逻辑电路构成规则" tabindex="-1"><a class="header-anchor" href="#组合逻辑电路构成规则"><span>组合逻辑电路构成规则</span></a></h3><ol><li>元件是组合逻辑电路</li><li>输出端只能相互连接 | 即，每一个点的信号来源只能有一个</li><li>输出节点不能反馈到输入端</li></ol><h3 id="逻辑电路图" tabindex="-1"><a class="header-anchor" href="#逻辑电路图"><span>逻辑电路图</span></a></h3><p>一个逻辑电路对应一个逻辑表达式（单输出）</p><p>一个元件可以是多个逻辑电路图和在一起，比如有多输出的元件。</p><p><strong>扇出系数</strong>： 一个逻辑门允许的最大输入数目</p><p><strong>扇出系数</strong>：最大输出数目</p><h4 id="画逻辑门" tabindex="-1"><a class="header-anchor" href="#画逻辑门"><span><strong>画逻辑门</strong></span></a></h4><ul><li><p>根据优先级</p></li><li><p><strong>非&gt;与、与非 &gt;异或、同或 &gt;或、或非</strong></p></li><li><p>多位二进制运算，需要标志位数：</p></li></ul><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250307113324303.png" alt="image-20250307113324303" tabindex="0" loading="lazy"><figcaption>image-20250307113324303</figcaption></figure><h3 id="多级逻辑电路" tabindex="-1"><a class="header-anchor" href="#多级逻辑电路"><span>多级逻辑电路</span></a></h3><p><strong>门的传播延迟 | 门延迟</strong>： 输入信号改变到输出信号发生改变之间的时间；</p><p><strong>任何逻辑电路都可以是两级电路</strong>：可以画真值表，再写成<strong>与-或表达式</strong>或<strong>或-与表达式</strong></p><blockquote><p>将多级变成两级：</p><ul><li>减少时间延迟，提高速度</li><li>增加电路的复杂程度；使用的电路硬件数目会增加</li><li>速度up，成本up</li></ul></blockquote><h3 id="组合逻辑电路设计" tabindex="-1"><a class="header-anchor" href="#组合逻辑电路设计"><span>组合逻辑电路设计</span></a></h3><ol><li>逻辑抽象</li><li>真值表</li><li>卡诺图化简</li><li>画图</li></ol><blockquote><p>注： 任何表达式都可以化简成为二级<strong>与-或</strong>表达式，将与或表达式两次取反，可以得到<strong>与非 -与非</strong>表达式；</p></blockquote><p><strong>示例：红绿灯正常工作状态</strong></p><ol><li><p>数字抽象：三位输出，每一位代表一个灯，每个灯要么亮要么关（0 or 1）</p></li><li><p>真值表和卡诺图：</p></li></ol><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310101940750.png" alt="image-20250310101940750" tabindex="0" loading="lazy"><figcaption>image-20250310101940750</figcaption></figure><p>最后得到F的表达式（最简表达式）</p><p><strong>两级的与-或表达式可以变成与非-与非表达式</strong>：通过两次取反！<br> $$<br> F= \\overline{\\overline{\\overline R \\cdot \\overline{Y} \\cdot \\overline{G}} \\cdot \\overline{R \\cdot Y} \\cdot \\overline{R \\cdot G} \\cdot \\overline{Y \\cdot G} }<br> $$</p><h3 id="无关项-非法值-高阻态-三态门" tabindex="-1"><a class="header-anchor" href="#无关项-非法值-高阻态-三态门"><span>无关项，非法值，高阻态，三态门</span></a></h3><h4 id="无关项" tabindex="-1"><a class="header-anchor" href="#无关项"><span><strong>无关项</strong></span></a></h4><ul><li><strong>不在乎的输入组合</strong>即是无关项：压根不会出现的输入组合，或者没有影响的项；如BCD码里面大于1001的编码都是无关项。</li><li>无关项在真值表中用d表示，意思是0 or 1毫不关心。</li><li>无关项在卡诺图中<strong>可以全部填上</strong>，如果这有利于你化简卡诺图的话。你只需要在乎真的输出为1的项，无关项你可以选择是否保留，<strong>只要有利于你化简</strong>。</li></ul><h4 id="非法值" tabindex="-1"><a class="header-anchor" href="#非法值"><span><strong>非法值</strong></span></a></h4><ul><li>既不是0也不是1</li></ul><h4 id="高组态" tabindex="-1"><a class="header-anchor" href="#高组态"><span><strong>高组态</strong></span></a></h4><ul><li>处于一种非正常状态的第三种电气态，<strong>电路就项断开一样</strong></li></ul><h4 id="三态门" tabindex="-1"><a class="header-anchor" href="#三态门"><span><strong>三态门</strong></span></a></h4><ul><li><p>一种总线接口电路，可以输出0,1，高组态</p></li><li><p>有一个<strong>输出使能控制端</strong> EN</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310103629211.png" alt="image-20250310103629211" tabindex="0" loading="lazy"><figcaption>image-20250310103629211</figcaption></figure></li><li><p>使用例子：用于连接总线，多个三台逻辑连接在一起，使得每一次，只能有一个输入端可以输入总线。</p></li><li><p>三态门有两种，一种是当使能端为H时可以工作，另一种是当其为L时工作。</p></li><li><p>使能端也可以同时有多个，比如有三个使能端G,G2A_L,G2B_L，则只有为1 0 0的时候才能正输出0 or 1。 ）</p></li><li><p>在将EN端写入真值表后，每一个最小项、最大项都要将EN的输入考虑进去；</p></li></ul><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310110012505.png" alt="image-20250310110012505" tabindex="0" loading="lazy"><figcaption>image-20250310110012505</figcaption></figure><p>根据这个，可以写出：<br> $$<br> Y0=\\overline{EN}+ EN \\cdot \\overline{A1} \\cdot A0+ EN \\cdot A1 \\cdot \\overline{A0}+EN \\cdot A1 \\cdot A2<br> $$</p><blockquote><p>需要将EN端也要考虑到这里的输出表达式；因为EN端相当于也是一个输入端</p></blockquote><h2 id="第二讲-典型组合逻辑部件" tabindex="-1"><a class="header-anchor" href="#第二讲-典型组合逻辑部件"><span>第二讲 | 典型组合逻辑部件</span></a></h2><h3 id="译码器" tabindex="-1"><a class="header-anchor" href="#译码器"><span>译码器</span></a></h3><ul><li>多数入，多输出；通常是$n-2^n$ 型；</li><li>最简单的译码器：从$2^n$ 个输出端中，选择一个输出；即，根据输入的数据，&quot;翻译&quot;出对应的输出信号。</li><li>每一个输出都对应了一个数字逻辑电路，多输出有多个电路，最后将其组合在一起</li></ul><p><strong>应用实例</strong>： 数字灯</p><ol><li><p>输入信号：四位二进制，代表0-9；多出来的几种表示一些字母（图中有）</p></li><li><p>输出信号：a~g的输出信号，代表 a~g的对应的管子是否亮；</p></li><li><p>真值表：</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310111606460.png" style="width:50%;"></li></ol>',43)),o(l,null,{default:t(()=>n[0]||(n[0]=[a("（多出来的A b C d E F，如果不需要的话，可以当成"),i("em",null,"无关项",-1),a("）")])),_:1}),n[8]||(n[8]=e('<ol start="4"><li>最后可以画卡诺图(以a为例)</li></ol><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112019639.png" alt="image-20250310112019639" tabindex="0" loading="lazy"><figcaption>image-20250310112019639</figcaption></figure><hr><h3 id="编码器" tabindex="-1"><a class="header-anchor" href="#编码器"><span>编码器</span></a></h3><p>实现$2^n-n$的编码</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112417722.png" style="width:50%;">',6)),o(l,null,{default:t(()=>n[1]||(n[1]=[a("示意图")])),_:1}),n[9]||(n[9]=e('<h4 id="互斥编码器" tabindex="-1"><a class="header-anchor" href="#互斥编码器"><span>互斥编码器</span></a></h4><p>所有输入端互斥，只能有一个为高电位，其余都是低电位；这一个低电位，映射得到n个输出的结果；</p><div style="display:grid;grid-template-columns:1fr 1fr 1fr;"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112449336.png"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112458266.png"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112512746.png"></div>',3)),o(l,null,{default:t(()=>n[2]||(n[2]=[a("真值表是简化的")])),_:1}),n[10]||(n[10]=e('<h4 id="优先级编码器" tabindex="-1"><a class="header-anchor" href="#优先级编码器"><span>优先级编码器</span></a></h4><ul><li>输入端可以有多个高电位</li><li>按照输入端的优先级来决定输出什么</li></ul><div style="display:grid;grid-template-columns:1fr 1fr;"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310113140218.png"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310113149719.png"></div><blockquote><p>真值表 和 示意图</p></blockquote><h3 id="多路选择器" tabindex="-1"><a class="header-anchor" href="#多路选择器"><span>多路选择器</span></a></h3><ul><li>多个输入，一个输出，通过控制端来决定输出哪个；</li><li>输入端和输出端的<strong>位数要一致</strong>；但是，控制端的位数可以和输入输出端不一致；</li></ul><p>选择器的实现：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114125426.png" alt="image-20250310114125426" tabindex="0" loading="lazy"><figcaption>image-20250310114125426</figcaption></figure>',8)),o(l,null,{default:t(()=>n[3]||(n[3]=[a("1位2路选择器")])),_:1}),n[11]||(n[11]=i("figure",null,[i("img",{src:"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114250807.png",alt:"image-20250310114250807",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20250310114250807")],-1)),o(l,null,{default:t(()=>n[4]||(n[4]=[a("1位4路选择器")])),_:1}),n[12]||(n[12]=e('<p>多路选择器还可以实现类似门电路的性质：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114759765.png" alt="image-20250310114759765" tabindex="0" loading="lazy"><figcaption>image-20250310114759765</figcaption></figure><h3 id="多路分配器" tabindex="-1"><a class="header-anchor" href="#多路分配器"><span>多路分配器</span></a></h3><p>将一个输入信号，输出到某一个输出端里面；具体输出到哪个电路，由控制端决定;</p><p><strong>一个输入，多个输出，其中某一些为1</strong></p><h3 id="半加器、全加器" tabindex="-1"><a class="header-anchor" href="#半加器、全加器"><span>半加器、全加器</span></a></h3><h4 id="半加器-ha-half-adder" tabindex="-1"><a class="header-anchor" href="#半加器-ha-half-adder"><span>半加器 HA （Half Adder）</span></a></h4><p>只考虑加数和被加数，<strong>不考虑低位的进位</strong>；<br> $$<br> F= A \\oplus B<br> $$<br> 当前数字为F<br> $$<br> cout=A \\cdot B<br> $$<br> 进位为cout</p><h4 id="全加器fa-full-adder" tabindex="-1"><a class="header-anchor" href="#全加器fa-full-adder"><span>全加器FA （Full Adder)</span></a></h4><p>考虑加数、被加数和低位的进位；<br> $$<br> F= A \\oplus B \\oplus Cin<br> $$<br> 含义是，A，B，Cin如果只有一个或者有三个为1，则F为1；</p><p>输出为：<br> $$<br> cout=A \\cdot B+A \\cdot cin+B \\cdot cin<br> $$<br> 含义是，A，B，Cin如果有两个以上为1，则F为1；</p><h2 id="第三讲-组合逻辑电路的时序分析" tabindex="-1"><a class="header-anchor" href="#第三讲-组合逻辑电路的时序分析"><span>第三讲 | 组合逻辑电路的时序分析</span></a></h2><h4 id="tplh和tphl" tabindex="-1"><a class="header-anchor" href="#tplh和tphl"><span>tpLH和tpHL</span></a></h4><p><strong>tpLH</strong>是<code>上升沿电路延时</code>，从输入信号改变到输出信号由Low变High的时间</p><p><strong>tpHL</strong>是<code>下降沿电路延时</code>，从输入信号改变到输出信号由High变Low的时间</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314100910471.png" alt="image-20250314100910471" tabindex="0" loading="lazy"><figcaption>image-20250314100910471</figcaption></figure>',16)),o(l,null,{default:t(()=>n[5]||(n[5]=[a("通常，我们忽略上升下降的过程")])),_:1}),n[13]||(n[13]=e('<h4 id="传输延迟-和-最小延迟" tabindex="-1"><a class="header-anchor" href="#传输延迟-和-最小延迟"><span>传输延迟 和 最小延迟</span></a></h4><p>传输延迟 | Propogation delay <code>Tpd</code>：由输入信号改变到<strong>所有</strong>输出端得到<strong>稳定</strong>的信号所需的时间；</p><p>最小延迟 | Contamination delay <code>Tcd</code>：由输出信号改变到<strong>任何一个</strong>输出信号<strong>开始改变</strong>所需的时间；</p><p>关键路径： 从输入端到输出端的<strong>最长路径</strong> ；整个电路的传输延迟的时间即关键路径上所有的元件的<strong>传输延迟之和</strong></p><p>最小路径：电路的最小延迟是最短路径上所有的元件的最小延迟之和</p><p><strong>例子：</strong></p><p>假设每一个逻辑门电路的传输延时和最小延时分别是90ps和60ps；求下面这个电路的传输延迟和最小延迟</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314102739355.png" alt="image-20250314102739355" tabindex="0" loading="lazy"><figcaption>image-20250314102739355</figcaption></figure><ol><li>关键路径：必须经过3个逻辑门，则tpd=90ps*3=270ps；</li><li>最小延迟：至少经过2个逻辑门，则tcd=60ps*2=120ps；</li></ol><blockquote><p>最小延迟只是 有输出信号所需的最小时间，此时<strong>输出的并不是最终稳定的结果</strong></p></blockquote><h4 id="竞争与冒险" tabindex="-1"><a class="header-anchor" href="#竞争与冒险"><span>竞争与冒险</span></a></h4><p>某个输入信号通过多个路径作用到输出端，由于延迟不同，导致输入信号对于输出端造成不同的影响，称为<strong>竞争</strong></p><p>由于竞争，在输入信号发生变化的时候 输出端短时间可能出现不正确的电路信号，称为<strong>毛刺</strong></p><p>有毛刺，称为存在<strong>冒险</strong></p><div style="display:grid;grid-template-columns:1fr 1fr 1fr;"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314103910590.png"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314103926203.png"><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314103936138.png"></div>',15)),o(l,null,{default:t(()=>n[6]||(n[6]=[a("在A段从高点位变成低电位时出现竞争冒险")])),_:1}),n[14]||(n[14]=i("p",null,[i("strong",null,"判断出现竞争、冒险")],-1)),n[15]||(n[15]=i("ol",null,[i("li",null,"如果将逻辑表达式固定一个变量，其余变量任取，如果出现$X \\cdot \\overline X$或$X + \\overline X$ 那么存在毛刺"),i("li",null,[i("strong",null,"如果卡诺图里面任何两个相邻的1没有包含在同一个卡诺圈中")])],-1)),n[16]||(n[16]=i("p",null,[i("strong",null,"消除竞争冒险")],-1)),n[17]||(n[17]=i("ol",null,[i("li",null,"增加冗余项 （在卡诺图中多加几个圈，使得全部相邻的1都被包在一起）"),i("li",null,"低通滤波")],-1))])}const u=s(c,[["render",m],["__file","组合逻辑电路.html.vue"]]),y=JSON.parse('{"path":"/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF.html","title":"组合逻辑电路","lang":"zh-CN","frontmatter":{"date":"2025-03-07T00:00:00.000Z","title":"组合逻辑电路","description":"第一讲 | 组合逻辑电路概述 数字逻辑电路分为组合逻辑电路和时序逻辑电路 组合逻辑电路：输出只依赖于输入 时序逻辑电路：输出和输入、电路状态有关 CPU是时序逻辑电路 组合逻辑电路和时序逻辑电路混在一起用也是时序逻辑电路 组合逻辑电路构成规则 元件是组合逻辑电路 输出端只能相互连接 | 即，每一个点的信号来源只能有一个 输出节点不能反馈到输入端 逻辑电...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"组合逻辑电路"}],["meta",{"property":"og:description","content":"第一讲 | 组合逻辑电路概述 数字逻辑电路分为组合逻辑电路和时序逻辑电路 组合逻辑电路：输出只依赖于输入 时序逻辑电路：输出和输入、电路状态有关 CPU是时序逻辑电路 组合逻辑电路和时序逻辑电路混在一起用也是时序逻辑电路 组合逻辑电路构成规则 元件是组合逻辑电路 输出端只能相互连接 | 即，每一个点的信号来源只能有一个 输出节点不能反馈到输入端 逻辑电..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250307113324303.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-21T02:00:27.000Z"}],["meta",{"property":"article:published_time","content":"2025-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-21T02:00:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合逻辑电路\\",\\"image\\":[\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250307113324303.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310101940750.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310103629211.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310110012505.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310112019639.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114125426.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114250807.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250310114759765.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314100910471.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314102739355.png\\"],\\"datePublished\\":\\"2025-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-21T02:00:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"第一讲 | 组合逻辑电路概述","slug":"第一讲-组合逻辑电路概述","link":"#第一讲-组合逻辑电路概述","children":[{"level":3,"title":"组合逻辑电路构成规则","slug":"组合逻辑电路构成规则","link":"#组合逻辑电路构成规则","children":[]},{"level":3,"title":"逻辑电路图","slug":"逻辑电路图","link":"#逻辑电路图","children":[]},{"level":3,"title":"多级逻辑电路","slug":"多级逻辑电路","link":"#多级逻辑电路","children":[]},{"level":3,"title":"组合逻辑电路设计","slug":"组合逻辑电路设计","link":"#组合逻辑电路设计","children":[]},{"level":3,"title":"无关项，非法值，高阻态，三态门","slug":"无关项-非法值-高阻态-三态门","link":"#无关项-非法值-高阻态-三态门","children":[]}]},{"level":2,"title":"第二讲 | 典型组合逻辑部件","slug":"第二讲-典型组合逻辑部件","link":"#第二讲-典型组合逻辑部件","children":[{"level":3,"title":"译码器","slug":"译码器","link":"#译码器","children":[]},{"level":3,"title":"编码器","slug":"编码器","link":"#编码器","children":[]},{"level":3,"title":"多路选择器","slug":"多路选择器","link":"#多路选择器","children":[]},{"level":3,"title":"多路分配器","slug":"多路分配器","link":"#多路分配器","children":[]},{"level":3,"title":"半加器、全加器","slug":"半加器、全加器","link":"#半加器、全加器","children":[]}]},{"level":2,"title":"第三讲 | 组合逻辑电路的时序分析","slug":"第三讲-组合逻辑电路的时序分析","link":"#第三讲-组合逻辑电路的时序分析","children":[]}],"git":{"createdTime":1741354665000,"updatedTime":1742522427000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":4,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":7.87,"words":2360},"filePathRelative":"posts/NJUCS/数字逻辑与计算机组成/组合逻辑电路.md","localizedDate":"2025年3月7日","excerpt":"<h2>第一讲 | 组合逻辑电路概述</h2>\\n<p>数字逻辑电路分为<strong>组合逻辑电路</strong>和<strong>时序逻辑电路</strong></p>\\n<ul>\\n<li>组合逻辑电路：输出只依赖于输入</li>\\n<li>时序逻辑电路：输出和输入、电路状态有关</li>\\n</ul>\\n<blockquote>\\n<ol>\\n<li>CPU是时序逻辑电路</li>\\n<li>组合逻辑电路和时序逻辑电路混在一起用也是时序逻辑电路</li>\\n</ol>\\n</blockquote>\\n<h3>组合逻辑电路构成规则</h3>\\n<ol>\\n<li>元件是组合逻辑电路</li>\\n<li>输出端只能相互连接 | 即，每一个点的信号来源只能有一个</li>\\n<li>输出节点不能反馈到输入端</li>\\n</ol>","autoDesc":true}');export{u as comp,y as data};
