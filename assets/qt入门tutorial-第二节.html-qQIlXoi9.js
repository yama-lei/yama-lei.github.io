import{_ as s,c as a,d as l,o as e}from"./app-iw0frhaY.js";const n={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h2 id="如何确定某个函数是signal还是slot" tabindex="-1"><a class="header-anchor" href="#如何确定某个函数是signal还是slot"><span>如何确定某个函数是signal还是slot</span></a></h2><h3 id="对于信号-signal" tabindex="-1"><a class="header-anchor" href="#对于信号-signal"><span>对于信号(Signal)：</span></a></h3><ul><li><p><strong>声明方式</strong>：在类声明中使用<code>signals:</code>区域声明</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">signals:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> valueChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> newValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> operationCompleted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>特点</strong>：</p><ul><li>只有声明，没有实现代码(由moc自动生成)</li><li>返回类型必须是void</li><li>可以带参数但不能有默认参数</li><li>信号总是protected权限(只能在类内emit)</li></ul></li><li><p><strong>调用方式</strong>：使用<code>emit</code>关键字触发</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">emit</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> valueChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="对于槽-slot" tabindex="-1"><a class="header-anchor" href="#对于槽-slot"><span>对于槽(Slot)：</span></a></h3><ul><li><strong>声明方式</strong>：在类声明中使用<code>public slots:</code>或<code>private slots:</code>等区域声明<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">public slots:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doCalculation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>特点</strong>： <ul><li>需要完整的实现(像普通成员函数一样)</li><li>可以是虚函数</li><li>可以有各种返回类型和参数</li><li>可以设置访问权限(public/protected/private)</li></ul></li><li><strong>Qt5新特性</strong>：任何函数都可以作为槽，不一定要声明在slots区域</li></ul><h3 id="识别方法总结" tabindex="-1"><a class="header-anchor" href="#识别方法总结"><span>识别方法总结：</span></a></h3><ol><li>查看类声明中的<code>signals:</code>和<code>slots:</code>区域</li><li>在Qt Creator中，信号会有特殊图标(闪电符号)</li><li>信号只能声明不能实现，槽必须有实现</li><li>文档中会明确标注(Qt Assistant中的信号/槽标记)</li></ol><h2 id="连接信号与槽的其他方式" tabindex="-1"><a class="header-anchor" href="#连接信号与槽的其他方式"><span>连接信号与槽的其他方式</span></a></h2><p>除了使用<code>QObject::connect()</code>，还有以下几种方式：</p><h3 id="_1-qt5的新连接语法-c-11" tabindex="-1"><a class="header-anchor" href="#_1-qt5的新连接语法-c-11"><span>(1) Qt5的新连接语法(C++11)</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 传统方式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sender, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SIGNAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)), receiver, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SLOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Qt5新语法 - 编译时检查</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sender, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SenderClass::valueChanged, receiver, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ReceiverClass::setValue);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用lambda表达式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sender, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SenderClass::valueChanged, [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doSomething</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自动连接-ui文件" tabindex="-1"><a class="header-anchor" href="#_2-自动连接-ui文件"><span>(2) 自动连接(UI文件)</span></a></h3><ul><li>在Qt Designer中命名对象和槽函数遵循特定模式</li><li>使用<code>QMetaObject::connectSlotsByName()</code>自动连接</li><li>命名规则：<code>on_&lt;发送者对象名&gt;_&lt;信号名&gt;</code><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自动连接的槽函数声明</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">private slots:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> on_pushButton_clicked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-通过qml连接" tabindex="-1"><a class="header-anchor" href="#_3-通过qml连接"><span>(3) 通过QML连接</span></a></h3><ul><li>在QML中可以直接使用JavaScript语法连接信号与槽<div class="language-qml line-numbers-mode" data-highlighter="shiki" data-ext="qml" data-title="qml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    onClicked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">handleClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-直接调用" tabindex="-1"><a class="header-anchor" href="#_4-直接调用"><span>(4) 直接调用</span></a></h3><ul><li>虽然不推荐，但可以直接在信号触发的地方调用槽函数<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">emit</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> valueChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 触发信号</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 直接调用槽</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-使用事件过滤器" tabindex="-1"><a class="header-anchor" href="#_5-使用事件过滤器"><span>(5) 使用事件过滤器</span></a></h3><ul><li>虽然不是直接的信号槽连接，但可以用于对象间通信</li><li>通过<code>installEventFilter()</code>和<code>eventFilter()</code>实现</li></ul><p><strong>最佳实践建议</strong>：</p><ol><li>优先使用Qt5的新连接语法(编译时类型检查)</li><li>简单的UI操作可以使用自动连接</li><li>复杂的逻辑关系使用显式connect</li><li>避免混合使用多种连接方式造成混乱</li></ol><p>这些方法各有适用场景，<code>QObject::connect()</code>仍然是最灵活和强大的核心连接机制。</p>`,22)]))}const p=s(n,[["render",t],["__file","qt入门tutorial-第二节.html.vue"]]),k=JSON.parse('{"path":"/posts/c__%E5%BC%80%E5%8F%91/qt%E5%85%A5%E9%97%A8tutorial-%E7%AC%AC%E4%BA%8C%E8%8A%82.html","title":"qt入门tutorial-第二节","lang":"zh-CN","frontmatter":{"date":"2025-04-21T00:00:00.000Z","title":"qt入门tutorial-第二节","description":"如何确定某个函数是signal还是slot 对于信号(Signal)： 声明方式：在类声明中使用signals:区域声明 特点： 只有声明，没有实现代码(由moc自动生成) 返回类型必须是void 可以带参数但不能有默认参数 信号总是protected权限(只能在类内emit) 调用方式：使用emit关键字触发 对于槽(Slot)： 声明方式：在类声明...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/c__%E5%BC%80%E5%8F%91/qt%E5%85%A5%E9%97%A8tutorial-%E7%AC%AC%E4%BA%8C%E8%8A%82.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"qt入门tutorial-第二节"}],["meta",{"property":"og:description","content":"如何确定某个函数是signal还是slot 对于信号(Signal)： 声明方式：在类声明中使用signals:区域声明 特点： 只有声明，没有实现代码(由moc自动生成) 返回类型必须是void 可以带参数但不能有默认参数 信号总是protected权限(只能在类内emit) 调用方式：使用emit关键字触发 对于槽(Slot)： 声明方式：在类声明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T12:32:15.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T12:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"qt入门tutorial-第二节\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-22T12:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"如何确定某个函数是signal还是slot","slug":"如何确定某个函数是signal还是slot","link":"#如何确定某个函数是signal还是slot","children":[{"level":3,"title":"对于信号(Signal)：","slug":"对于信号-signal","link":"#对于信号-signal","children":[]},{"level":3,"title":"对于槽(Slot)：","slug":"对于槽-slot","link":"#对于槽-slot","children":[]},{"level":3,"title":"识别方法总结：","slug":"识别方法总结","link":"#识别方法总结","children":[]}]},{"level":2,"title":"连接信号与槽的其他方式","slug":"连接信号与槽的其他方式","link":"#连接信号与槽的其他方式","children":[{"level":3,"title":"(1) Qt5的新连接语法(C++11)","slug":"_1-qt5的新连接语法-c-11","link":"#_1-qt5的新连接语法-c-11","children":[]},{"level":3,"title":"(2) 自动连接(UI文件)","slug":"_2-自动连接-ui文件","link":"#_2-自动连接-ui文件","children":[]},{"level":3,"title":"(3) 通过QML连接","slug":"_3-通过qml连接","link":"#_3-通过qml连接","children":[]},{"level":3,"title":"(4) 直接调用","slug":"_4-直接调用","link":"#_4-直接调用","children":[]},{"level":3,"title":"(5) 使用事件过滤器","slug":"_5-使用事件过滤器","link":"#_5-使用事件过滤器","children":[]}]}],"git":{"createdTime":1745218327000,"updatedTime":1745325135000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":2,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":2.18,"words":654},"filePathRelative":"posts/c++开发/qt入门tutorial-第二节.md","localizedDate":"2025年4月21日","excerpt":"<h2>如何确定某个函数是signal还是slot</h2>\\n<h3>对于信号(Signal)：</h3>\\n<ul>\\n<li>\\n<p><strong>声明方式</strong>：在类声明中使用<code>signals:</code>区域声明</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" data-title=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">signals:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> valueChanged</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\"> newValue</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> operationCompleted</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>特点</strong>：</p>\\n<ul>\\n<li>只有声明，没有实现代码(由moc自动生成)</li>\\n<li>返回类型必须是void</li>\\n<li>可以带参数但不能有默认参数</li>\\n<li>信号总是protected权限(只能在类内emit)</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>调用方式</strong>：使用<code>emit</code>关键字触发</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" data-title=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">emit</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> valueChanged</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">10</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{p as comp,k as data};
