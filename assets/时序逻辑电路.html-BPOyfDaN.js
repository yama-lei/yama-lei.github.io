import{_ as p,c as s,d as g,e,g as t,b as i,r as c,o as l,f as o}from"./app-CSGXchyA.js";const r={};function m(h,a){const n=c("center");return l(),s("div",null,[a[2]||(a[2]=g('<p>[TOC]</p><h2 id="第一讲-时序逻辑电路概述" tabindex="-1"><a class="header-anchor" href="#第一讲-时序逻辑电路概述"><span>第一讲 | 时序逻辑电路概述</span></a></h2><p>输出结果的输出不仅由外部输入决定，还由当前的状态决定（or 由过去时刻的行为）</p><p>当输入新的信号之后，电路的状态可以改变，<strong>也可以保持在当前状态</strong></p><h3 id="有限状态机-finite-state-machine-fsm" tabindex="-1"><a class="header-anchor" href="#有限状态机-finite-state-machine-fsm"><span>有限状态机 | Finite state machine (FSM)</span></a></h3><p>有限状态机时用来刻画状态转换的工具</p><p>通常，用<strong>状态图</strong>来表示有限状态机</p><ul><li>状态用圆圈表示</li><li>状态转换用箭头(<code>有向边</code>)，并<strong>标注状态转变的输入信号和输出信号</strong>;</li></ul><blockquote><p>在图中，状态转换的箭头上面用 输入信号/输出信号 表示输入和输出</p></blockquote><p><strong>例：检测输入序列是否为连续4个“1”</strong></p><p>​ A-初始态：若输入1，则转B</p><p>​ B-连续1个“1”：若输入1，则转C</p><p>​ C-连续2个“1”：若输入1，则转D</p><p>​ D-连续3个“1”：若输入1，则状态不变 ，并输出为1（表示检测到连续4个1）</p><p>​ 任何状态下，输入0都会转到初态A</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314105927158.png" style="width:50%;"><hr><p><strong>如何用数字逻辑实现一个FSM？</strong></p><p>用二进制编码的方式，表示输入输出，状态（关键是状态）</p><ul><li><p><strong>输出函数</strong>：</p></li><li><p><strong>激励函数</strong>：</p></li><li><p><strong>记忆模块</strong>：</p></li></ul><h3 id="时序逻辑电路的结构" tabindex="-1"><a class="header-anchor" href="#时序逻辑电路的结构"><span><strong>时序逻辑电路的结构</strong></span></a></h3><p>状态记忆模块：由多个状态记忆单元构成（存储元件）</p><p>次态激励逻辑模块F ：激励函数（现态和外部输入的逻辑函数）</p><blockquote><p>激励函数和输出函数都是<strong>组合逻辑电路</strong>，状态记忆模块是<strong>时序逻辑电路</strong></p></blockquote><p>输出逻辑模块G ：输出函数（现态和外部输入的逻辑函数）</p><ul><li><p><strong>Mealy型：输出依赖于当前状态和当前输入信号</strong></p></li><li><p><strong>Moore型：输出仅依赖于当前状态，和当前输入信号无关</strong></p></li></ul><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314112122667.png" alt="image-20250314112122667" tabindex="0" loading="lazy"><figcaption>image-20250314112122667</figcaption></figure>',27)),e(n,null,{default:t(()=>a[0]||(a[0]=[o("Mealy")])),_:1}),a[3]||(a[3]=i("figure",null,[i("img",{src:"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314112743952.png",alt:"image-20250314112743952",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20250314112743952")],-1)),e(n,null,{default:t(()=>a[1]||(a[1]=[o("Moore")])),_:1}),a[4]||(a[4]=g('<p><strong>其中的激励函数和输出函数模块都是<code>组合逻辑电路</code>！！！</strong></p><p>记忆模块把旧的状态给激活函数和输出模块，然后激励模块才把新的状态给记忆模块；</p><blockquote><p>拿旧状态去算新状态和输出！</p></blockquote><hr><p><strong>同步时序逻辑电路 和 异步时序逻辑电路</strong></p><ul><li>同步时序逻辑电路：在统一的时钟信号控制下进行状态转换</li></ul><p>​ 通过Clk来控制记忆模块</p><p>异步时序逻辑电路：没有统一的时钟信号来控制状态的改变</p><p><strong>时钟脉冲</strong></p><p>时钟脉冲之间的时间间隔称为<code>时钟周期</code>。单位是秒。通常将1秒内所产生的脉冲个数称为<code>时钟频率</code>。单位是Hz计算机中的系统时钟就是一个典型的、频率精确和稳定的脉冲信号发生器。</p><h3 id="时序逻辑电路的定时" tabindex="-1"><a class="header-anchor" href="#时序逻辑电路的定时"><span>时序逻辑电路的定时</span></a></h3><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314113535631.png" alt="image-20250314113535631" tabindex="0" loading="lazy"><figcaption>image-20250314113535631</figcaption></figure><h2 id="第二讲-锁存器和触发器" tabindex="-1"><a class="header-anchor" href="#第二讲-锁存器和触发器"><span>第二讲 | 锁存器和触发器</span></a></h2><h3 id="双稳态元件" tabindex="-1"><a class="header-anchor" href="#双稳态元件"><span>双稳态元件</span></a></h3><p>一种可以表示两种状态的元件。</p><ul><li>状态1：置位态（Set）</li><li>状态0：复位态（Reset)</li></ul><p><strong>双稳态元件的简单实现：</strong></p><p>串联两个反相器，则反相器的输出状态不同，且保持稳定Q为高电平时，为置位状态；Q为低电平时，为复位状态</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314114119774.png" style="width:50%;"><p><strong>用两个反相器串联构建的 双稳态元件无法改变电路状态</strong></p><p>用1个或多个输入信号能驱动 双稳态元件进入稳定状态，这 些输入信号称为激励信号 或激励输入。</p><hr><h3 id="锁存器-latch" tabindex="-1"><a class="header-anchor" href="#锁存器-latch"><span>锁存器 | latch</span></a></h3><p>通过<strong>激励信号的电平信号</strong>来控制存储元件的状态</p><p>置位复位锁存器(Set-Reset latch)：</p><ul><li>具有置位和复位激励信号置位激励信号Set有效时，强制存储元件的输出Q为1</li><li>复位激励信号Reset有效时，强制存储元件的输出Q为0</li></ul><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314114631262.png" alt="image-20250314114631262" tabindex="0" loading="lazy"><figcaption>image-20250314114631262</figcaption></figure><h3 id="触发器-flip-flop" tabindex="-1"><a class="header-anchor" href="#触发器-flip-flop"><span>触发器 | flip-flop</span></a></h3><p>具有时钟控制信号(clock) 通过<strong>时钟信号的边沿</strong>和set/reset的电平共同来触发存储元件改变状态</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314114853081.png" alt="image-20250314114853081" tabindex="0" loading="lazy"><figcaption>image-20250314114853081</figcaption></figure><h3 id="sr-锁存器" tabindex="-1"><a class="header-anchor" href="#sr-锁存器"><span>SR 锁存器</span></a></h3><p>SR锁存器：使用一对交叉耦合的或非门构成双稳态电路，也称为置位-重置（复位）锁存器。</p><p><strong>S是置位输入端，R是重置输入端</strong></p><p><strong>从输入驱动信号有效开始，到输出达到稳定为止有一定的延迟</strong>，这个延迟称为<strong>触发延迟</strong>或**<code>锁存延迟</code>**</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095218420.png" alt="image-20250317095218420" tabindex="0" loading="lazy"><figcaption>image-20250317095218420</figcaption></figure><ul><li>S和R至多一个为高电平</li><li>如果S为高电平的话，Q输出高电平；如果R为高电平的话，Q输出低电平。</li></ul><p><strong>状态转移表</strong>，<strong>状态转移方程</strong></p><p><span><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317102612290.png" style="width:30%;"></span> 使用<strong>状态转移表</strong>来表示状态的转移。</p><p>状态转移方程：<br> $$<br> Q*= S+ \\overline R \\cdot Q<br> $$</p><p>$$<br> S \\cdot Q \\neq 1<br> $$</p><h3 id="d锁存器" tabindex="-1"><a class="header-anchor" href="#d锁存器"><span>D锁存器</span></a></h3><p>D锁存器有一个驱动信号和一个使能端</p><p>当使能端为高电平的时候，驱动信号才能有效，驱动信号为高电平的时候，输出高电平；</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095604714.png" alt="image-20250317095604714" tabindex="0" loading="lazy"><figcaption>image-20250317095604714</figcaption></figure><blockquote><p>D为数据输入端，C为控制端；<strong>只有一个激励输入端</strong></p></blockquote><p>C=0的时候，电路状态不变；C=1时，将D的数据<strong>锁存</strong>。</p><p><strong>状态图，状态转移表，状态方程,时序图</strong>：</p><table><thead><tr><th style="text-align:center;">D</th><th style="text-align:center;">Q*</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr></tbody></table><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317104318075.png" style="width:50%;"><h3 id="d触发器" tabindex="-1"><a class="header-anchor" href="#d触发器"><span>D触发器</span></a></h3><p>主从结构的D触发器</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317105212890.png" alt="image-20250317105212890" tabindex="0" loading="lazy"><figcaption>image-20250317105212890</figcaption></figure><table><thead><tr><th><strong>CLK</strong></th><th><strong>主锁存器</strong></th><th><strong>从锁存器</strong></th></tr></thead><tbody><tr><td>L</td><td>写入 QM变为D</td><td>不变Q=last</td></tr><tr><td>上升沿</td><td>锁存QM=D</td><td>写入Q变为QM</td></tr><tr><td>H</td><td>不变 QM=D</td><td>不变Q=QM</td></tr></tbody></table><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317105551072.png" alt="image-20250317105551072" tabindex="0" loading="lazy"><figcaption>image-20250317105551072</figcaption></figure><p>（上升沿到来之前，把D已经存入QM，之后在上升沿结束以后把QM存入Q）</p><p><strong>锁存延迟 | Clock -&gt; Q延迟</strong></p><p>在clk边沿到来后，到Q输出改变为D的时间。</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317111333422.png" alt="image-20250317111333422" tabindex="0" loading="lazy"><figcaption>image-20250317111333422</figcaption></figure><p><strong>建立时间 | setup</strong></p><p>输入信号D在时钟边沿到来前，需要稳定的时间**<code>主锁存器</code>稳定下来的时间**。</p><p><strong>保持时间 | hold time</strong></p><p>输入信号D在时钟边沿到来后，需要稳定的时间，<strong>要让<code>从锁存器</code>成功写入的时间</strong>。</p><blockquote><p><strong>避免主锁存器在上升沿过程中写入新的D值</strong></p></blockquote><p><strong>这个D触发器是<em>上升沿</em>触发</strong>，还有<em>下降沿</em>触发的触发器</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095932508.png" alt="image-20250317095932508" tabindex="0" loading="lazy"><figcaption>image-20250317095932508</figcaption></figure><p>当Clk信号为高电平时，左边的D锁存器打开，Q和D的信号一致；</p><p>当Clk信号由高电平转成低电平的时候，右边的寄存器打开，使得第二个寄存器能够输出原先D的信号。</p><h4 id="带使能端的d触发器" tabindex="-1"><a class="header-anchor" href="#带使能端的d触发器"><span>带使能端的D触发器</span></a></h4><p>能够通过使能端控制是否要写入激励输入端D的值</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112102309.png" alt="image-20250317112102309" tabindex="0" loading="lazy"><figcaption>image-20250317112102309</figcaption></figure><blockquote><p>注意到： 前面其实接入了一个二路选择器，输入分别是D和Q，使能端为EN；</p></blockquote><hr><h4 id="带复位功能的d触发器" tabindex="-1"><a class="header-anchor" href="#带复位功能的d触发器"><span>带复位功能的D触发器</span></a></h4><p>同步触发：在时钟信号才能更改触发器的状态</p><p>PR: preset,CLR:clear</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112326003.png" alt="image-20250317112326003" tabindex="0" loading="lazy"><figcaption>image-20250317112326003</figcaption></figure><hr><h3 id="t触发器" tabindex="-1"><a class="header-anchor" href="#t触发器"><span>T触发器</span></a></h3><p>在每一次时钟周期都会改变存储的状态,每一次时钟周期到来都会取反。</p><blockquote><p>隐藏了初始化的线路，实际上是有初始化的功能的。</p></blockquote><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112847603.png" alt="image-20250317112847603" tabindex="0" loading="lazy"><figcaption>image-20250317112847603</figcaption></figure><p>可以加入使能端En，当使能端为高电平时才能改变触发器；</p><hr><p><strong>存储？</strong> 电路在一直工作的时候，只要在一定的激励输入下，输出稳定不不变，Q值保持稳定，因此为<strong>存储</strong></p><p>组合逻辑电路只能按照输入计算出输出，不是存储。</p><p>最简单的时序逻辑电路： 存储元件（锁存器和触发器）</p><p>经典的时序逻辑电路：寄存器</p><h2 id="第三讲-同步时序逻辑设计" tabindex="-1"><a class="header-anchor" href="#第三讲-同步时序逻辑设计"><span><strong>第三讲</strong> | <strong>同步时序逻辑设计</strong></span></a></h2><p>设计一个检测是否由连续的“101”的电路</p><h3 id="分析需求-画状态图" tabindex="-1"><a class="header-anchor" href="#分析需求-画状态图"><span>分析需求，画状态图</span></a></h3><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317114922785.png" alt="image-20250317114922785" tabindex="0" loading="lazy"><figcaption>image-20250317114922785</figcaption></figure><p>状态图/状态表的要求：</p><ul><li><p>互斥性：从每个状态出发的所有状态转换路径上的转换条件都 是互斥的，如本例中，转移条件分别是X=0和X=1，互斥。</p></li><li><p>完备性：从每个状态出发的所有状态转换路径上的转移表达式 的逻辑或等于1（逻辑真）。如X=0和X=1，0+1=1。</p></li></ul><p><strong>即，线不少（所有的有向边都要画出），线不重（同一个输入只能有一个输出）</strong></p><h3 id="化简状态图" tabindex="-1"><a class="header-anchor" href="#化简状态图"><span>化简状态图</span></a></h3><p><strong>等价状态</strong>：两个状态等价指在所有输入组合下，它们的<strong>输出相同</strong>且(<strong>次态相同 <em>或</em>次态等价</strong>)</p><p>我们合并等价状态可以获得简单的状态表</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317115627046.png" alt="image-20250317115627046" tabindex="0" loading="lazy"><figcaption>image-20250317115627046</figcaption></figure><p>将所有<strong>给定相同的输入X</strong>得到<strong>相同的次态</strong>的<strong>现态</strong>编码为同一种。</p><h3 id="状态编码" tabindex="-1"><a class="header-anchor" href="#状态编码"><span>状态编码</span></a></h3><p>将化简之后的状态表中的每一个状态进行编码。显然，编码尾数m要满足$2^m &gt; n$ ，n为状态数目。</p><p>通常采取相邻法来寻求较优的编码方案：</p><ul><li>次态相同，编码最好相邻</li><li>同一个现态的次态最好相邻</li><li>输出相同的现态最好相邻</li></ul><blockquote><p>考试会给出确定的编码</p></blockquote><p>有了编码以后，就可以用编码来表示状态了：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321102905968.png" alt="image-20250321102905968" tabindex="0" loading="lazy"><figcaption>image-20250321102905968</figcaption></figure><p>之后，我们可以得出次态的每一位(Y1* and Y0* )以及输出(Z)的<em>次态输出函数</em>和<em>输出逻辑函数</em>：<br> $$<br> Y1^{*} = \\overline Y1 \\cdot Y2 \\cdot \\overline X<br> $$</p><p>$$<br> Y0\\text{有多个1，写起来比较复杂，但是我们可以通过无关项化简}<br> $$</p><p>$$<br> Z=...<br> $$</p><p>因为我们有一个编码没有用上:10，所以这个是无关项，我们在上面三个逻辑函数的卡诺图中都加上无关项d</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104254685.png" alt="image-20250321104254685" tabindex="0" loading="lazy"><figcaption>image-20250321104254685</figcaption></figure><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104335563.png" alt="image-20250321104335563" tabindex="0" loading="lazy"><figcaption>image-20250321104335563</figcaption></figure><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104352646.png" alt="image-20250321104352646" tabindex="0" loading="lazy"><figcaption>image-20250321104352646</figcaption></figure><h3 id="电路设计" tabindex="-1"><a class="header-anchor" href="#电路设计"><span>电路设计</span></a></h3><h4 id="推导激励函数" tabindex="-1"><a class="header-anchor" href="#推导激励函数"><span>推导激励函数</span></a></h4><p>我们需要根据<code>次态函数</code>和存储元件的<code>特征方程</code>，通常我们使用D触发器<br> $$<br> \\text{状态转移方程为} Q^*=D<br> $$<br> 所以我们可以得到激励函数：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104858879.png" alt="image-20250321104858879" tabindex="0" loading="lazy"><figcaption>image-20250321104858879</figcaption></figure><p>$$<br> \\text{次态方程： } Y1^* = \\overline Y1 \\cdot Y0 \\cdot \\overline X<br> $$</p><p>$$<br> \\text{次态方程： } Y0^* = \\overline Y1 \\cdot Y0 \\cdot X<br> $$</p><p>含义是，<code>现态</code>(Y1,Y0)和输入(X)经过运算，作为触发器的激励输入，得到次态(Y1* ,Y0*)。</p><h4 id="画电路图" tabindex="-1"><a class="header-anchor" href="#画电路图"><span>画电路图</span></a></h4><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321105328804.png" alt="image-20250321105328804" tabindex="0" loading="lazy"><figcaption>image-20250321105328804</figcaption></figure><p>在这里，包括了<strong>次态激励模块</strong>，<strong>状态记忆存储模块</strong>，<strong>输出模块</strong></p><h3 id="电路分析" tabindex="-1"><a class="header-anchor" href="#电路分析"><span>电路分析</span></a></h3><h4 id="未用状态分析" tabindex="-1"><a class="header-anchor" href="#未用状态分析"><span>未用状态分析</span></a></h4><p>因为编码空间大于实际的状态数目，所以存在<strong>未用状态</strong>；可能在未用状态进入了循环，称为<strong>挂起</strong>现象。</p><p>如果电路能够在有限的时钟内，进入正确的工作状态，有正确的输出，称为电路能够<strong>自启动</strong>。</p><hr><p>对于我们前面的未用状态：10</p><p>当输入x为0时，带入激励函数，得到次态00，输出0；次态正确，输出正确。</p><p>输入x为1时，得到次态01，次态正确，但是输出为1，错误；</p><p>因此需要对输出函数进行一些修改：<br> $$<br> Z=Y1<em>X \\rightarrow Z=Y1</em>Y0*X<br> $$<br> ​</p><h4 id="电路定时分析" tabindex="-1"><a class="header-anchor" href="#电路定时分析"><span>电路定时分析</span></a></h4><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321111836795.png" alt="image-20250321111836795" tabindex="0" loading="lazy"><figcaption>image-20250321111836795</figcaption></figure><ul><li>时钟信号改变 -&gt; D触发器的输出改变-&gt;计算次态 | clk-to-Q延迟+ 组合逻辑延迟+ 触发器setup</li></ul><blockquote><p>需要setup的原因，setup时间是将D1信号存入<code>主锁存器</code>,如果没有setup时间，那么当时钟沿到来的时候，没法成功地将正确的信号给<code>从锁存器</code>；</p></blockquote><ul><li>而输出因为只依赖于现态和输入，因此只要输出延迟小于一个clk周期就行。</li></ul><p>延迟限制：</p><ol><li>clk周期 》 clk_to_Q + 次态激励函数延迟+D触发器的setup时间</li><li>clk周期》输出逻辑函数的延迟</li><li>hold时间《clk_to_Q+次态函数逻辑延迟</li></ol><p>（此处省略一万字，自行看ppt）</p><p>待补充。。。。。</p><h2 id="第四讲-典型的同步时序逻辑电路设计" tabindex="-1"><a class="header-anchor" href="#第四讲-典型的同步时序逻辑电路设计"><span>第四讲 | 典型的同步时序逻辑电路设计</span></a></h2><h3 id="计数器" tabindex="-1"><a class="header-anchor" href="#计数器"><span>计数器</span></a></h3><h4 id="异步行波加法计数器" tabindex="-1"><a class="header-anchor" href="#异步行波加法计数器"><span><strong>异步行波加法计数器</strong></span></a></h4><blockquote><p>这里的异步指的是clk信号不同，前面章节说的异步时序逻辑电路指的是没有一个统一clk来驱动电路</p></blockquote><p>我们可以借助T触发器来设计一个计数器</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321114457700.png" alt="image-20250321114457700" style="zoom:25%;"><p>因为每一个T触发器都是在clk信号<code>下降沿</code>时触发, 前一个触发器改变两次（一个周期）才能引起下一个触发器变化一次，从而实现计数的原理。</p><p><strong>延迟</strong>： 四个锁存延迟</p><h4 id="同步并行加法计数器" tabindex="-1"><a class="header-anchor" href="#同步并行加法计数器"><span>同步并行加法计数器</span></a></h4><ul><li>所有的触发器都使用同一个clk信号</li></ul><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321115123268.png" alt="image-20250321115123268" style="zoom:50%;"><p>延迟： 与门传播延迟+触发延迟</p><h4 id="异步行波减法计数器" tabindex="-1"><a class="header-anchor" href="#异步行波减法计数器"><span>异步行波减法计数器</span></a></h4><blockquote><p>这里虽然用的是D触发器，但是其实和T触发器的功能是类似的，只不过多了一个<strong>RST</strong></p></blockquote><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321115622151.png" alt="image-20250321115622151"><p>这里的触发器是<strong>上升沿触发</strong>，即从0-&gt;1的时候，才会引起下一位的变化</p><h3 id="寄存器" tabindex="-1"><a class="header-anchor" href="#寄存器"><span>寄存器</span></a></h3><p>寄存器是一种<strong>时序逻辑电路</strong>，只能存储数据，在没有新的clk脉冲到来之前，寄存器能够保持内容不变。</p><p>在CPU里面寄存器通过三态门和总线相连（同一时刻，只能有一个寄存器将数据送入总线）</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324102201127.png" alt="image-20250324102201127" style="zoom:50%;"><p>可以给寄存器中，加入复位，清零，使能等功能。</p><h4 id="寄存器堆" tabindex="-1"><a class="header-anchor" href="#寄存器堆"><span><strong>寄存器堆</strong></span></a></h4><p>寄存器堆也称<code>GPRs(通用寄存器组：Gerneal Purpose Register set)</code></p><p>寄存器堆中的每一个寄存器都有它的编号。</p><blockquote><p>bus的意思是<code>总线</code></p></blockquote><p>图中为一个简单的寄存器堆的示意图：</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324103039982.png" alt="image-20250324103039982" style="zoom:25%;"><ol><li>busW是写入的信号，具体写入那个寄存器要由RW(写入寄存器的编号)决定。busW的数据有n位，说明每一个寄存器也是n位，即每一个寄存器都有n个D锁存器。</li><li>RW，RA，RB代表的寄存器的编号，因此最多只能有$2^k$个寄存器。</li><li><strong>读操作是组合逻辑操作</strong> ，写操作属于时序逻辑操作。</li></ol><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250328101503247.png" alt="image-20250328101503247" tabindex="0" loading="lazy"><figcaption>image-20250328101503247</figcaption></figure><p>一个可能的结构如下图所示：</p><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324103832149.png" alt="image-20250324103832149" style="zoom:25%;"><ul><li><p>其中busA和busB一直有数据，不由clk决定。</p></li><li><p>每一个寄存器是32位，里面有32个D锁存器；</p></li><li><p>寄存器有2^5个。</p></li></ul><blockquote><p>思考：如果正在写寄存器1，到那时又要读寄存器1，那么读出来额度是旧的还是新的？</p></blockquote><h4 id="移位寄存器" tabindex="-1"><a class="header-anchor" href="#移位寄存器"><span>移位寄存器</span></a></h4><p>能够根据clk的信号来控制，实现左移 or 右移的操作。</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324104525507.png" alt="image-20250324104525507" tabindex="0" loading="lazy"><figcaption>image-20250324104525507</figcaption></figure><p><strong>四位通用移位寄存器</strong>：</p><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324105054531.png" alt="image-20250324105054531" tabindex="0" loading="lazy"><figcaption>image-20250324105054531</figcaption></figure><p>具体实现比较复杂，这里略去。</p><p><strong>桶型移位器</strong>：</p><blockquote><p>这其实是一个组合逻辑电路，而非时序逻辑电路</p></blockquote><figure><img src="https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324105427506.png" alt="image-20250324105427506" tabindex="0" loading="lazy"><figcaption>image-20250324105427506</figcaption></figure>',183))])}const u=p(r,[["render",m],["__file","时序逻辑电路.html.vue"]]),y=JSON.parse('{"path":"/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF.html","title":"时序逻辑电路","lang":"zh-CN","frontmatter":{"title":"时序逻辑电路","date":"2025-03-14T00:00:00.000Z","author":"Yama","description":"[TOC] 第一讲 | 时序逻辑电路概述 输出结果的输出不仅由外部输入决定，还由当前的状态决定（or 由过去时刻的行为） 当输入新的信号之后，电路的状态可以改变，也可以保持在当前状态 有限状态机 | Finite state machine (FSM) 有限状态机时用来刻画状态转换的工具 通常，用状态图来表示有限状态机 状态用圆圈表示 状态转换用箭头(...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/NJUCS/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"时序逻辑电路"}],["meta",{"property":"og:description","content":"[TOC] 第一讲 | 时序逻辑电路概述 输出结果的输出不仅由外部输入决定，还由当前的状态决定（or 由过去时刻的行为） 当输入新的信号之后，电路的状态可以改变，也可以保持在当前状态 有限状态机 | Finite state machine (FSM) 有限状态机时用来刻画状态转换的工具 通常，用状态图来表示有限状态机 状态用圆圈表示 状态转换用箭头(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314112122667.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T10:44:29.000Z"}],["meta",{"property":"article:author","content":"Yama"}],["meta",{"property":"article:published_time","content":"2025-03-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-28T10:44:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"时序逻辑电路\\",\\"image\\":[\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314112122667.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314112743952.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314113535631.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314114631262.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250314114853081.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095218420.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095604714.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317105212890.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317105551072.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317111333422.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317095932508.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112102309.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112326003.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317112847603.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317114922785.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250317115627046.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321102905968.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104254685.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104335563.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104352646.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321104858879.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321105328804.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250321111836795.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250328101503247.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324104525507.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324105054531.png\\",\\"https://yamapicgo.oss-cn-nanjing.aliyuncs.com/picgoImage/image-20250324105427506.png\\"],\\"datePublished\\":\\"2025-03-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-28T10:44:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama\\"}]}"]]},"headers":[{"level":2,"title":"第一讲 | 时序逻辑电路概述","slug":"第一讲-时序逻辑电路概述","link":"#第一讲-时序逻辑电路概述","children":[{"level":3,"title":"有限状态机 | Finite state machine (FSM)","slug":"有限状态机-finite-state-machine-fsm","link":"#有限状态机-finite-state-machine-fsm","children":[]},{"level":3,"title":"时序逻辑电路的结构","slug":"时序逻辑电路的结构","link":"#时序逻辑电路的结构","children":[]},{"level":3,"title":"时序逻辑电路的定时","slug":"时序逻辑电路的定时","link":"#时序逻辑电路的定时","children":[]}]},{"level":2,"title":"第二讲 | 锁存器和触发器","slug":"第二讲-锁存器和触发器","link":"#第二讲-锁存器和触发器","children":[{"level":3,"title":"双稳态元件","slug":"双稳态元件","link":"#双稳态元件","children":[]},{"level":3,"title":"锁存器 | latch","slug":"锁存器-latch","link":"#锁存器-latch","children":[]},{"level":3,"title":"触发器 | flip-flop","slug":"触发器-flip-flop","link":"#触发器-flip-flop","children":[]},{"level":3,"title":"SR 锁存器","slug":"sr-锁存器","link":"#sr-锁存器","children":[]},{"level":3,"title":"D锁存器","slug":"d锁存器","link":"#d锁存器","children":[]},{"level":3,"title":"D触发器","slug":"d触发器","link":"#d触发器","children":[]},{"level":3,"title":"T触发器","slug":"t触发器","link":"#t触发器","children":[]}]},{"level":2,"title":"第三讲 | 同步时序逻辑设计","slug":"第三讲-同步时序逻辑设计","link":"#第三讲-同步时序逻辑设计","children":[{"level":3,"title":"分析需求，画状态图","slug":"分析需求-画状态图","link":"#分析需求-画状态图","children":[]},{"level":3,"title":"化简状态图","slug":"化简状态图","link":"#化简状态图","children":[]},{"level":3,"title":"状态编码","slug":"状态编码","link":"#状态编码","children":[]},{"level":3,"title":"电路设计","slug":"电路设计","link":"#电路设计","children":[]},{"level":3,"title":"电路分析","slug":"电路分析","link":"#电路分析","children":[]}]},{"level":2,"title":"第四讲 | 典型的同步时序逻辑电路设计","slug":"第四讲-典型的同步时序逻辑电路设计","link":"#第四讲-典型的同步时序逻辑电路设计","children":[{"level":3,"title":"计数器","slug":"计数器","link":"#计数器","children":[]},{"level":3,"title":"寄存器","slug":"寄存器","link":"#寄存器","children":[]}]}],"git":{"createdTime":1741939558000,"updatedTime":1743158669000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":6,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":12.96,"words":3887},"filePathRelative":"posts/NJUCS/数字逻辑与计算机组成/时序逻辑电路.md","localizedDate":"2025年3月14日","excerpt":"<p>[TOC]</p>\\n<h2>第一讲 | 时序逻辑电路概述</h2>\\n<p>输出结果的输出不仅由外部输入决定，还由当前的状态决定（or 由过去时刻的行为）</p>\\n<p>当输入新的信号之后，电路的状态可以改变，<strong>也可以保持在当前状态</strong></p>\\n<h3>有限状态机 | Finite state machine (FSM)</h3>\\n<p>有限状态机时用来刻画状态转换的工具</p>\\n<p>通常，用<strong>状态图</strong>来表示有限状态机</p>\\n<ul>\\n<li>状态用圆圈表示</li>\\n<li>状态转换用箭头(<code>有向边</code>)，并<strong>标注状态转变的输入信号和输出信号</strong>;</li>\\n</ul>","autoDesc":true}');export{u as comp,y as data};
