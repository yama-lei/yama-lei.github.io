import{_ as i,c as n,d as a,o as e}from"./app-BSg5KQij.js";const t={};function l(p,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h1><h2 id="linked-list-例题" tabindex="-1"><a class="header-anchor" href="#linked-list-例题"><span>Linked list 例题</span></a></h2><blockquote><p>下面是linked list的ADT</p></blockquote><h3 id="the-provided-structure-of-link" tabindex="-1"><a class="header-anchor" href="#the-provided-structure-of-link"><span>the provided structure of link</span></a></h3><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;A linked list.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s = Link(1)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.first</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.rest is Link.empty</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s = Link(2, Link(3, Link(4)))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.first = 5</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.rest.first = 6</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.rest.rest = Link.empty</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s                                    # Displays the contents of repr(s)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(5, Link(6))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s.rest = Link(7, Link(Link(8, Link(9))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(5, Link(7, Link(Link(8, Link(9)))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">print(s)                             # Prints str(s)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &lt;5 7 &lt;8 9&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    empty </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Link.empty </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> isinstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rest, Link)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.first </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rest </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __repr__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Link.empty:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rest_repr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;, &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> repr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rest)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            rest_repr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Link(&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> repr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.first) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rest_repr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __str__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        string </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&lt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Link.empty:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            string </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.first) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            self</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rest</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> string </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.first) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&gt;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="problem-2-1-store-digits-100pts" tabindex="-1"><a class="header-anchor" href="#problem-2-1-store-digits-100pts"><span>Problem 2.1: Store Digits (100pts)</span></a></h3><p>Write a function store_digits that takes in an integer n and returns a linked list where each element of the list is a digit of n. Your solution should run in Linear time in the length of its input.</p><p><strong>Note</strong>: You may not use str, repr or reversed in your implementation.</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> store_digits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;Stores the digits of a positive number n in a linked list.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s = store_digits(0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">store_digits(2345)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(2, Link(3, Link(4, Link(5))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">store_digits(8760)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(8, Link(7, Link(6, Link(0))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"># a check for restricted functions</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">import inspect, re</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cleaned = re.sub(r&quot;#.*</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">n&quot;, &#39;&#39;, re.sub(r&#39;&quot;{3}[\\s\\S]*?&quot;{3}&#39;, &#39;&#39;, inspect.getsource(store_digits)))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">print(&quot;Do not steal chicken!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;repr&quot;, &quot;reversed&quot;]]) else None</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>right solution</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>def store_digits(n):</span></span>
<span class="line"><span>    &quot;&quot;&quot;Stores the digits of a positive number n in a linked list.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &gt;&gt;&gt; s = store_digits(0)</span></span>
<span class="line"><span>    &gt;&gt;&gt; s</span></span>
<span class="line"><span>    Link(0)</span></span>
<span class="line"><span>    &gt;&gt;&gt; store_digits(2345)</span></span>
<span class="line"><span>    Link(2, Link(3, Link(4, Link(5))))</span></span>
<span class="line"><span>    &gt;&gt;&gt; store_digits(8760)</span></span>
<span class="line"><span>    Link(8, Link(7, Link(6, Link(0))))</span></span>
<span class="line"><span>    &gt;&gt;&gt; # a check for restricted functions</span></span>
<span class="line"><span>    &gt;&gt;&gt; import inspect, re</span></span>
<span class="line"><span>    &gt;&gt;&gt; cleaned = re.sub(r&quot;#.*\\\\n&quot;, &#39;&#39;, re.sub(r&#39;&quot;{3}[\\s\\S]*?&quot;{3}&#39;, &#39;&#39;, inspect.getsource(store_digits)))</span></span>
<span class="line"><span>    &gt;&gt;&gt; print(&quot;Do not steal chicken!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;repr&quot;, &quot;reversed&quot;]]) else None</span></span>
<span class="line"><span>    &quot;&quot;&quot;</span></span>
<span class="line"><span>    temp=Link(n%10)</span></span>
<span class="line"><span>    n//=10</span></span>
<span class="line"><span>    while n:</span></span>
<span class="line"><span>        temp=Link(n%10,temp)</span></span>
<span class="line"><span>        n//=10</span></span>
<span class="line"><span>    return temp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>wrong solution</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> store_digits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;Stores the digits of a positive number n in a linked list.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s = store_digits(0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">store_digits(2345)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(2, Link(3, Link(4, Link(5))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">store_digits(8760)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Link(8, Link(7, Link(6, Link(0))))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"># a check for restricted functions</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">import inspect, re</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cleaned = re.sub(r&quot;#.*</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">n&quot;, &#39;&#39;, re.sub(r&#39;&quot;{3}[\\s\\S]*?&quot;{3}&#39;, &#39;&#39;, inspect.getsource(store_digits)))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">print(&quot;Do not steal chicken!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;repr&quot;, &quot;reversed&quot;]]) else None</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;&#39;&#39;   if n&lt;10:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        return Link(n)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    else:    </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        temp=store_digits(n//10)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        head=temp</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        while(temp.rest!=Link.empty):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            temp=temp.rest</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        temp.rest=Link(n%10)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        return head</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">store_digits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#顺序相反了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A right but inefficient solution</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> store_digits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> store_digits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        head </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp.rest </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Link.empty:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp.rest</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        temp.rest </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> head</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="problem-2-2-reverse-100-pts" tabindex="-1"><a class="header-anchor" href="#problem-2-2-reverse-100-pts"><span>Problem 2.2: Reverse (100 pts)</span></a></h3><p>Write a function reverse which takes in a linked list lnk, reverses the order of it and returns the reversed list(i.e. return a new reference to the head of the reversed list). Your implementation should mutate the original linked list. DO NOT create any new linked lists.</p><p>You may not just simply exchange the first to reverse the list. On the contrary, you should make change on rest.</p><p>There is more than one way to solve this problem. Can you come up with more solutions?</p><pre><code>def reverse(lnk):
    &quot;&quot;&quot; Reverse a linked list.
&gt;&gt;&gt; a = Link(1, Link(2, Link(3)))
&gt;&gt;&gt; # Disallow the use of making new Links before calling reverse
&gt;&gt;&gt; Link.__init__, hold = lambda *args: print(&quot;Do not steal chicken!&quot;), Link.__init__
&gt;&gt;&gt; try:
...     r = reverse(a)
... finally:
...     Link.__init__ = hold
&gt;&gt;&gt; print(r)
&lt;3 2 1&gt;
&gt;&gt;&gt; a.first # Make sure you do not change first
1
&quot;&quot;&quot;
&quot;*** YOUR CODE HERE ***&quot;
</code></pre><p>solution1 using loop</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def reverse(lnk):</span></span>
<span class="line"><span>    &quot;&quot;&quot; Reverse a linked list.</span></span>
<span class="line"><span>    &gt;&gt;&gt; a = Link(1, Link(2, Link(3)))</span></span>
<span class="line"><span>    &gt;&gt;&gt; # Disallow the use of making new Links before calling reverse</span></span>
<span class="line"><span>    &gt;&gt;&gt; Link.__init__, hold = lambda *args: print(&quot;Do not steal chicken!&quot;), Link.__init__</span></span>
<span class="line"><span>    &gt;&gt;&gt; try:</span></span>
<span class="line"><span>    ...     r = reverse(a)</span></span>
<span class="line"><span>    ... finally:</span></span>
<span class="line"><span>    ...     Link.__init__ = hold</span></span>
<span class="line"><span>    &gt;&gt;&gt; print(r)</span></span>
<span class="line"><span>    &lt;3 2 1&gt;</span></span>
<span class="line"><span>    &gt;&gt;&gt; a.first # Make sure you do not change first</span></span>
<span class="line"><span>    1</span></span>
<span class="line"><span>    &quot;&quot;&quot;</span></span>
<span class="line"><span>    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span>    if lnk==Link.empty:</span></span>
<span class="line"><span>        return lnk</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>        prev,curr,next=Link.empty,lnk,Link.empty</span></span>
<span class="line"><span>        while curr!=Link.empty:</span></span>
<span class="line"><span>            next=curr.rest</span></span>
<span class="line"><span>            curr.rest=prev</span></span>
<span class="line"><span>            prev=curr</span></span>
<span class="line"><span>            curr=next</span></span>
<span class="line"><span>        return prev    # return the prev node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>solution2 using recursion</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def reverse(lnk):</span></span>
<span class="line"><span>    &quot;&quot;&quot; Reverse a linked list.</span></span>
<span class="line"><span>    &gt;&gt;&gt; a = Link(1, Link(2, Link(3)))</span></span>
<span class="line"><span>    &gt;&gt;&gt; # Disallow the use of making new Links before calling reverse</span></span>
<span class="line"><span>    &gt;&gt;&gt; Link.__init__, hold = lambda *args: print(&quot;Do not steal chicken!&quot;), Link.__init__</span></span>
<span class="line"><span>    &gt;&gt;&gt; try:</span></span>
<span class="line"><span>    ...     r = reverse(a)</span></span>
<span class="line"><span>    ... finally:</span></span>
<span class="line"><span>    ...     Link.__init__ = hold</span></span>
<span class="line"><span>    &gt;&gt;&gt; print(r)</span></span>
<span class="line"><span>    &lt;3 2 1&gt;</span></span>
<span class="line"><span>    &gt;&gt;&gt; a.first # Make sure you do not change first</span></span>
<span class="line"><span>    1</span></span>
<span class="line"><span>    &quot;&quot;&quot;</span></span>
<span class="line"><span>    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span>    def helper(lnk,prev=Link.empty):</span></span>
<span class="line"><span>        if lnk==Link.empty:</span></span>
<span class="line"><span>            return prev</span></span>
<span class="line"><span>        else:</span></span>
<span class="line"><span>            next=lnk.rest</span></span>
<span class="line"><span>            lnk.rest=prev</span></span>
<span class="line"><span>            return helper(next,lnk)</span></span>
<span class="line"><span>    return helper(lnk)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="与python-list相关的操作" tabindex="-1"><a class="header-anchor" href="#与python-list相关的操作"><span>与python list相关的操作</span></a></h2><blockquote><p>尤其注意：<code>append</code>,<code>+</code>,<code>extend</code> 在修改(mutate)数组时的区别</p></blockquote><table><thead><tr><th>Method/Function</th><th>Description</th><th>Example Input</th><th>Resulting List/Output</th></tr></thead><tbody><tr><td><strong><code>append(x)</code></strong></td><td>Adds a single element <code>x</code> to the end of the list.</td><td><code>[1, 2, 3].append(4)</code></td><td><code>[1, 2, 3, 4]</code></td></tr><tr><td><strong><code>extend(iter)</code></strong></td><td>Adds all elements of an iterable <code>iter</code> to the end of the list.</td><td><code>[1, 2, 3].extend([4, 5])</code></td><td><code>[1, 2, 3, 4, 5]</code></td></tr><tr><td><strong><code>insert(i, x)</code></strong></td><td>Inserts element <code>x</code> at index <code>i</code>.</td><td><code>[1, 2, 3].insert(1, 10)</code></td><td><code>[1, 10, 2, 3]</code></td></tr><tr><td><strong><code>remove(x)</code></strong></td><td>Removes the first occurrence of element <code>x</code>.</td><td><code>[1, 2, 3, 2].remove(2)</code></td><td><code>[1, 3, 2]</code></td></tr><tr><td><strong><code>pop([i])</code></strong></td><td>Removes and returns the element at index <code>i</code> (defaults to the last element).</td><td><code>[1, 2, 3].pop(1)</code></td><td><code>2</code> (list becomes <code>[1, 3]</code>)</td></tr><tr><td><strong><code>clear()</code></strong></td><td>Removes all elements from the list.</td><td><code>[1, 2, 3].clear()</code></td><td><code>[]</code></td></tr><tr><td><strong><code>index(x)</code></strong></td><td>Returns the index of the first occurrence of element <code>x</code>.</td><td><code>[1, 2, 3, 2].index(2)</code></td><td><code>1</code></td></tr><tr><td><strong><code>count(x)</code></strong></td><td>Returns the number of occurrences of element <code>x</code>.</td><td><code>[1, 2, 2, 3].count(2)</code></td><td><code>2</code></td></tr><tr><td><strong><code>sort()</code></strong></td><td>Sorts the list in ascending order (in-place).</td><td><code>[3, 1, 2].sort()</code></td><td><code>[1, 2, 3]</code></td></tr><tr><td><strong><code>reverse()</code></strong></td><td>Reverses the elements of the list in-place.</td><td><code>[1, 2, 3].reverse()</code></td><td><code>[3, 2, 1]</code></td></tr><tr><td><strong><code>copy()</code></strong></td><td>Returns a shallow copy of the list.</td><td><code>[1, 2, 3].copy()</code></td><td><code>[1, 2, 3]</code> (new list)</td></tr><tr><td><strong><code>len(list)</code></strong></td><td>Returns the number of elements in the list.</td><td><code>len([1, 2, 3])</code></td><td><code>3</code></td></tr><tr><td><strong><code>sum(list)</code></strong></td><td>Returns the sum of all elements in the list.</td><td><code>sum([1, 2, 3])</code></td><td><code>6</code></td></tr><tr><td><strong><code>min(list)</code></strong></td><td>Returns the smallest element in the list.</td><td><code>min([1, 2, 3])</code></td><td><code>1</code></td></tr><tr><td><strong><code>max(list)</code></strong></td><td>Returns the largest element in the list.</td><td><code>max([1, 2, 3])</code></td><td><code>3</code></td></tr><tr><td><strong><code>sorted(list)</code></strong></td><td>Returns a new sorted list (does not modify the original).</td><td><code>sorted([3, 1, 2])</code></td><td><code>[1, 2, 3]</code></td></tr><tr><td><strong><code>reversed(list)</code></strong></td><td>Returns a reverse iterator (use <code>list()</code> to convert to a list).</td><td><code>list(reversed([1, 2, 3]))</code></td><td><code>[3, 2, 1]</code></td></tr><tr><td><strong><code>list(iter)</code></strong></td><td>Converts an iterable (e.g., tuple, string) to a list.</td><td><code>list((1, 2, 3))</code></td><td><code>[1, 2, 3]</code></td></tr><tr><td><strong><code>del list[i]</code></strong></td><td>Deletes the element at index <code>i</code>.</td><td><code>del [1, 2, 3][1]</code></td><td><code>[1, 3]</code></td></tr><tr><td><strong><code>list[i:j]</code></strong></td><td>Slices the list from index <code>i</code> to <code>j-1</code>.</td><td><code>[1, 2, 3, 4][1:3]</code></td><td><code>[2, 3]</code></td></tr><tr><td><strong><code>list + list</code></strong></td><td>Concatenates two lists.</td><td><code>[1, 2] + [3, 4]</code></td><td><code>[1, 2, 3, 4]</code></td></tr><tr><td><strong><code>list * n</code></strong></td><td>Repeats the list <code>n</code> times.</td><td><code>[1, 2] * 2</code></td><td><code>[1, 2, 1, 2]</code></td></tr></tbody></table><hr>`,29)]))}const d=i(t,[["render",l],["__file","List.html.vue"]]),k=JSON.parse(`{"path":"/posts/python%E5%AD%A6%E4%B9%A0/List.html","title":"List","lang":"zh-CN","frontmatter":{"date":"2025-01-10T00:00:00.000Z","description":"List Linked list 例题 下面是linked list的ADT the provided structure of link Problem 2.1: Store Digits (100pts) Write a function store_digits that takes in an integer n and returns a l...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/python%E5%AD%A6%E4%B9%A0/List.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"List"}],["meta",{"property":"og:description","content":"List Linked list 例题 下面是linked list的ADT the provided structure of link Problem 2.1: Store Digits (100pts) Write a function store_digits that takes in an integer n and returns a l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T00:02:20.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T00:02:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"List\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-19T00:02:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"Linked list 例题","slug":"linked-list-例题","link":"#linked-list-例题","children":[{"level":3,"title":"the provided structure of link","slug":"the-provided-structure-of-link","link":"#the-provided-structure-of-link","children":[]},{"level":3,"title":"Problem 2.1: Store Digits (100pts)","slug":"problem-2-1-store-digits-100pts","link":"#problem-2-1-store-digits-100pts","children":[]},{"level":3,"title":"Problem 2.2: Reverse (100 pts)","slug":"problem-2-2-reverse-100-pts","link":"#problem-2-2-reverse-100-pts","children":[]}]},{"level":2,"title":"与python list相关的操作","slug":"与python-list相关的操作","link":"#与python-list相关的操作","children":[]}],"git":{"createdTime":1736926918000,"updatedTime":1739923340000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":3,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":4.33,"words":1300},"filePathRelative":"posts/python学习/List.md","localizedDate":"2025年1月10日","excerpt":"\\n<h2>Linked list 例题</h2>\\n<blockquote>\\n<p>下面是linked list的ADT</p>\\n</blockquote>\\n<h3>the provided structure of link</h3>\\n<div class=\\"language-py line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"py\\" data-title=\\"py\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Link</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    \\"\\"\\"A linked list.</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s = Link(1)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.first</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.rest is Link.empty</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    True</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s = Link(2, Link(3, Link(4)))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.first = 5</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.rest.first = 6</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.rest.rest = Link.empty</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s                                    # Displays the contents of repr(s)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    Link(5, Link(6))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s.rest = Link(7, Link(Link(8, Link(9))))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">s</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    Link(5, Link(7, Link(Link(8, Link(9)))))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &gt;&gt;&gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">print(s)                             # Prints str(s)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    &lt;5 7 &lt;8 9&gt;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    \\"\\"\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    empty </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __init__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\"> first</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\"> rest</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#ABB2BF\\">empty</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        assert</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> rest </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">is</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> Link.empty </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">or</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> isinstance</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(rest, Link)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.first </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> first</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rest </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> rest</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __repr__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        if</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rest </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">is</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> not</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> Link.empty:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            rest_repr </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ', '</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> +</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> repr</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rest)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        else</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            rest_repr </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ''</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 'Link('</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> +</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> repr</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.first) </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> rest_repr </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ')'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __str__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">        string </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> '&lt;'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        while</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rest </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">is</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> not</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> Link.empty:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            string </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+=</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> str</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.first) </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ' '</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">            self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rest</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> string </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> str</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.first) </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> '&gt;'</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,k as data};
