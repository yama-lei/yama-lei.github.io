import{_ as s,c as e,d as a,o as t}from"./app-ZuA8x4Zq.js";const l={};function n(h,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="元素的访问" tabindex="-1"><a class="header-anchor" href="#元素的访问"><span>元素的访问</span></a></h1><h2 id="javascript的dom操作" tabindex="-1"><a class="header-anchor" href="#javascript的dom操作"><span>Javascript的DOM操作</span></a></h2><h2 id="vue中使用ref作为标识来操作元素" tabindex="-1"><a class="header-anchor" href="#vue中使用ref作为标识来操作元素"><span>vue中使用ref作为标识来操作元素</span></a></h2><p>在vue中，因为往往需要很多的vue组件来结合，如果使用id来获取元素的话，可能出现id重复，导致获取到错误的元素。</p><p>因此使用ref是很好的操作：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;province&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Hunan&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!--在template里面这么写--&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> province</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//......</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">province</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即便在不同的文件中使用同名的ref变量，也能够互不干扰。</p>`,8)]))}const p=s(l,[["render",n],["__file","元素的访问.html.vue"]]),d=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%BF%E9%97%AE.html","title":"元素的访问","lang":"zh-CN","frontmatter":{"title":"元素的访问","date":"2025-01-20T00:00:00.000Z","description":"元素的访问 Javascript的DOM操作 vue中使用ref作为标识来操作元素 在vue中，因为往往需要很多的vue组件来结合，如果使用id来获取元素的话，可能出现id重复，导致获取到错误的元素。 因此使用ref是很好的操作： 这样即便在不同的文件中使用同名的ref变量，也能够互不干扰。","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%BF%E9%97%AE.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"元素的访问"}],["meta",{"property":"og:description","content":"元素的访问 Javascript的DOM操作 vue中使用ref作为标识来操作元素 在vue中，因为往往需要很多的vue组件来结合，如果使用id来获取元素的话，可能出现id重复，导致获取到错误的元素。 因此使用ref是很好的操作： 这样即便在不同的文件中使用同名的ref变量，也能够互不干扰。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-21T12:52:33.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-21T12:52:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"元素的访问\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-21T12:52:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"Javascript的DOM操作","slug":"javascript的dom操作","link":"#javascript的dom操作","children":[]},{"level":2,"title":"vue中使用ref作为标识来操作元素","slug":"vue中使用ref作为标识来操作元素","link":"#vue中使用ref作为标识来操作元素","children":[]}],"git":{"createdTime":1737463953000,"updatedTime":1737463953000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":1,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"posts/前端开发/元素的访问.md","localizedDate":"2025年1月20日","excerpt":"\\n<h2>Javascript的DOM操作</h2>\\n<h2>vue中使用ref作为标识来操作元素</h2>\\n<p>在vue中，因为往往需要很多的vue组件来结合，如果使用id来获取元素的话，可能出现id重复，导致获取到错误的元素。</p>\\n<p>因此使用ref是很好的操作：</p>\\n<div class=\\"language-html line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"html\\" data-title=\\"html\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">h2</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> ref</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"province\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt; Hunan&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">h2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">&lt;!--在template里面这么写--&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,d as data};
