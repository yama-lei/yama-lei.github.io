import{_ as e,c as d,d as o,o as r}from"./app-CTobDjGc.js";const n={};function c(s,t){return r(),d("div",null,t[0]||(t[0]=[o('<h1 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h1><h2 id="string的method" tabindex="-1"><a class="header-anchor" href="#string的method"><span>string的method</span></a></h2><p>（generated by ChatGPT）</p><table><thead><tr><th><strong>Method</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td><code>length()</code> or <code>size()</code></td><td>Returns the number of characters in the string.</td><td><code>s.length();</code> or <code>s.size();</code></td></tr><tr><td><code>empty()</code></td><td>Checks if the string is empty.</td><td><code>s.empty();</code></td></tr><tr><td><code>clear()</code></td><td>Clears the string, making it empty.</td><td><code>s.clear();</code></td></tr><tr><td><code>append(str)</code></td><td>Appends <code>str</code> to the end of the string.</td><td><code>s.append(&quot; world&quot;);</code></td></tr><tr><td><code>operator+=</code></td><td>Concatenates another string or character.</td><td><code>s += &quot; world&quot;;</code></td></tr><tr><td><code>insert(pos, str)</code></td><td>Inserts <code>str</code> at position <code>pos</code>.</td><td><code>s.insert(5, &quot; hello&quot;);</code></td></tr><tr><td><code>erase(pos, len)</code></td><td>Erases <code>len</code> characters from position <code>pos</code>.</td><td><code>s.erase(5, 3);</code></td></tr><tr><td><code>replace(pos, len, str)</code></td><td>Replaces <code>len</code> characters starting at <code>pos</code> with <code>str</code>.</td><td><code>s.replace(5, 3, &quot;world&quot;);</code></td></tr><tr><td><code>substr(pos, len)</code></td><td>Returns a substring starting at <code>pos</code> with <code>len</code> characters.</td><td><code>s.substr(0, 5);</code></td></tr><tr><td><code>find(str)</code></td><td>Finds the first occurrence of <code>str</code> and returns its position. Returns <code>std::string::npos</code> if not found.</td><td><code>s.find(&quot;hello&quot;);</code></td></tr><tr><td><code>rfind(str)</code></td><td>Finds the last occurrence of <code>str</code>.</td><td><code>s.rfind(&quot;hello&quot;);</code></td></tr><tr><td><code>find_first_of(str)</code></td><td>Finds the first occurrence of any character in <code>str</code>.</td><td><code>s.find_first_of(&quot;aeiou&quot;);</code></td></tr><tr><td><code>find_last_of(str)</code></td><td>Finds the last occurrence of any character in <code>str</code>.</td><td><code>s.find_last_of(&quot;aeiou&quot;);</code></td></tr><tr><td><code>find_first_not_of(str)</code></td><td>Finds the first character not in <code>str</code>.</td><td><code>s.find_first_not_of(&quot;abc&quot;);</code></td></tr><tr><td><code>find_last_not_of(str)</code></td><td>Finds the last character not in <code>str</code>.</td><td><code>s.find_last_not_of(&quot;abc&quot;);</code></td></tr><tr><td><code>compare(str)</code></td><td>Compares the string with <code>str</code>. Returns 0 if equal, &lt;0 if less, &gt;0 if greater.</td><td><code>s.compare(&quot;hello&quot;);</code></td></tr><tr><td><code>c_str()</code></td><td>Returns a C-style null-terminated character array.</td><td><code>const char* c = s.c_str();</code></td></tr><tr><td><code>data()</code></td><td>Returns a pointer to the underlying character array (similar to <code>c_str()</code> but not null-terminated).</td><td><code>const char* d = s.data();</code></td></tr><tr><td><code>at(pos)</code></td><td>Returns the character at position <code>pos</code> (with bounds checking).</td><td><code>char c = s.at(5);</code></td></tr><tr><td><code>operator[]</code></td><td>Returns the character at position <code>pos</code> (no bounds checking).</td><td><code>char c = s[5];</code></td></tr><tr><td><code>push_back(ch)</code></td><td>Appends a character <code>ch</code> to the end of the string.</td><td><code>s.push_back(&#39;!&#39;);</code></td></tr><tr><td><code>pop_back()</code></td><td>Removes the last character from the string.</td><td><code>s.pop_back();</code></td></tr><tr><td><code>resize(n)</code></td><td>Resizes the string to contain <code>n</code> characters.</td><td><code>s.resize(10);</code></td></tr><tr><td><code>swap(str)</code></td><td>Swaps the contents of the string with <code>str</code>.</td><td><code>s.swap(otherString);</code></td></tr><tr><td><code>begin()</code></td><td>Returns an iterator to the beginning of the string.</td><td><code>auto it = s.begin();</code></td></tr><tr><td><code>end()</code></td><td>Returns an iterator to the end of the string.</td><td><code>auto it = s.end();</code></td></tr><tr><td><code>rbegin()</code></td><td>Returns a reverse iterator to the beginning of the reversed string.</td><td><code>auto it = s.rbegin();</code></td></tr><tr><td><code>rend()</code></td><td>Returns a reverse iterator to the end of the reversed string.</td><td><code>auto it = s.rend();</code></td></tr><tr><td><code>to_string(val)</code></td><td>Converts a number (<code>int</code>, <code>float</code>, etc.) to a string.</td><td><code>std::to_string(123);</code></td></tr><tr><td><code>stoi(str)</code></td><td>Converts a string to an integer.</td><td><code>int num = std::stoi(&quot;123&quot;);</code></td></tr><tr><td><code>stof(str)</code></td><td>Converts a string to a floating-point number.</td><td><code>float num = std::stof(&quot;123.45&quot;);</code></td></tr><tr><td><code>getline(cin, str)</code></td><td>Reads an entire line of input into the string.</td><td><code>std::getline(std::cin, s);</code></td></tr></tbody></table><blockquote><p>注意rbegin的含义是reversed的string起始字符串的迭代器</p></blockquote><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>Note:</span></a></h2><p>string 风格的字符串用printf(&quot;%s&quot;)打印会出现乱码，因为这个不适合string风格。想要用printf的话，需要这么写：printf(&quot;%d&quot;,str.c_str());即调用成员函数c_str();</p>',7)]))}const a=e(n,[["render",c],["__file","string.html.vue"]]),h=JSON.parse(`{"path":"/posts/NJUCS/%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/string.html","title":"String","lang":"zh-CN","frontmatter":{"date":"2025-01-26T00:00:00.000Z","description":"String string的method （generated by ChatGPT） 注意rbegin的含义是reversed的string起始字符串的迭代器 Note: string 风格的字符串用printf(\\"%s\\")打印会出现乱码，因为这个不适合string风格。想要用printf的话，需要这么写：printf(\\"%d\\",str.c_str(...","head":[["meta",{"property":"og:url","content":"https://github.com/yama-lei/yama-lei.github.io/posts/NJUCS/%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/string.html"}],["meta",{"property":"og:site_name","content":"Myblog"}],["meta",{"property":"og:title","content":"String"}],["meta",{"property":"og:description","content":"String string的method （generated by ChatGPT） 注意rbegin的含义是reversed的string起始字符串的迭代器 Note: string 风格的字符串用printf(\\"%s\\")打印会出现乱码，因为这个不适合string风格。想要用printf的话，需要这么写：printf(\\"%d\\",str.c_str(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T00:39:58.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T00:39:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"String\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-19T00:39:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yama-lei\\",\\"url\\":\\"/underbuilding.html\\"}]}"]]},"headers":[{"level":2,"title":"string的method","slug":"string的method","link":"#string的method","children":[]},{"level":2,"title":"Note:","slug":"note","link":"#note","children":[]}],"git":{"createdTime":1738062279000,"updatedTime":1739925598000,"contributors":[{"name":"yama-lei","username":"yama-lei","email":"1908777046@qq.com","commits":3,"url":"https://github.com/yama-lei"}]},"readingTime":{"minutes":1.73,"words":520},"filePathRelative":"posts/NJUCS/高级程序设计/string.md","localizedDate":"2025年1月26日","excerpt":"\\n<h2>string的method</h2>\\n<p>（generated by ChatGPT）</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>Method</strong></th>\\n<th><strong>Description</strong></th>\\n<th><strong>Example</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>length()</code> or <code>size()</code></td>\\n<td>Returns the number of characters in the string.</td>\\n<td><code>s.length();</code> or <code>s.size();</code></td>\\n</tr>\\n<tr>\\n<td><code>empty()</code></td>\\n<td>Checks if the string is empty.</td>\\n<td><code>s.empty();</code></td>\\n</tr>\\n<tr>\\n<td><code>clear()</code></td>\\n<td>Clears the string, making it empty.</td>\\n<td><code>s.clear();</code></td>\\n</tr>\\n<tr>\\n<td><code>append(str)</code></td>\\n<td>Appends <code>str</code> to the end of the string.</td>\\n<td><code>s.append(\\" world\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>operator+=</code></td>\\n<td>Concatenates another string or character.</td>\\n<td><code>s += \\" world\\";</code></td>\\n</tr>\\n<tr>\\n<td><code>insert(pos, str)</code></td>\\n<td>Inserts <code>str</code> at position <code>pos</code>.</td>\\n<td><code>s.insert(5, \\" hello\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>erase(pos, len)</code></td>\\n<td>Erases <code>len</code> characters from position <code>pos</code>.</td>\\n<td><code>s.erase(5, 3);</code></td>\\n</tr>\\n<tr>\\n<td><code>replace(pos, len, str)</code></td>\\n<td>Replaces <code>len</code> characters starting at <code>pos</code> with <code>str</code>.</td>\\n<td><code>s.replace(5, 3, \\"world\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>substr(pos, len)</code></td>\\n<td>Returns a substring starting at <code>pos</code> with <code>len</code> characters.</td>\\n<td><code>s.substr(0, 5);</code></td>\\n</tr>\\n<tr>\\n<td><code>find(str)</code></td>\\n<td>Finds the first occurrence of <code>str</code> and returns its position. Returns <code>std::string::npos</code> if not found.</td>\\n<td><code>s.find(\\"hello\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>rfind(str)</code></td>\\n<td>Finds the last occurrence of <code>str</code>.</td>\\n<td><code>s.rfind(\\"hello\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>find_first_of(str)</code></td>\\n<td>Finds the first occurrence of any character in <code>str</code>.</td>\\n<td><code>s.find_first_of(\\"aeiou\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>find_last_of(str)</code></td>\\n<td>Finds the last occurrence of any character in <code>str</code>.</td>\\n<td><code>s.find_last_of(\\"aeiou\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>find_first_not_of(str)</code></td>\\n<td>Finds the first character not in <code>str</code>.</td>\\n<td><code>s.find_first_not_of(\\"abc\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>find_last_not_of(str)</code></td>\\n<td>Finds the last character not in <code>str</code>.</td>\\n<td><code>s.find_last_not_of(\\"abc\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>compare(str)</code></td>\\n<td>Compares the string with <code>str</code>. Returns 0 if equal, &lt;0 if less, &gt;0 if greater.</td>\\n<td><code>s.compare(\\"hello\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>c_str()</code></td>\\n<td>Returns a C-style null-terminated character array.</td>\\n<td><code>const char* c = s.c_str();</code></td>\\n</tr>\\n<tr>\\n<td><code>data()</code></td>\\n<td>Returns a pointer to the underlying character array (similar to <code>c_str()</code> but not null-terminated).</td>\\n<td><code>const char* d = s.data();</code></td>\\n</tr>\\n<tr>\\n<td><code>at(pos)</code></td>\\n<td>Returns the character at position <code>pos</code> (with bounds checking).</td>\\n<td><code>char c = s.at(5);</code></td>\\n</tr>\\n<tr>\\n<td><code>operator[]</code></td>\\n<td>Returns the character at position <code>pos</code> (no bounds checking).</td>\\n<td><code>char c = s[5];</code></td>\\n</tr>\\n<tr>\\n<td><code>push_back(ch)</code></td>\\n<td>Appends a character <code>ch</code> to the end of the string.</td>\\n<td><code>s.push_back('!');</code></td>\\n</tr>\\n<tr>\\n<td><code>pop_back()</code></td>\\n<td>Removes the last character from the string.</td>\\n<td><code>s.pop_back();</code></td>\\n</tr>\\n<tr>\\n<td><code>resize(n)</code></td>\\n<td>Resizes the string to contain <code>n</code> characters.</td>\\n<td><code>s.resize(10);</code></td>\\n</tr>\\n<tr>\\n<td><code>swap(str)</code></td>\\n<td>Swaps the contents of the string with <code>str</code>.</td>\\n<td><code>s.swap(otherString);</code></td>\\n</tr>\\n<tr>\\n<td><code>begin()</code></td>\\n<td>Returns an iterator to the beginning of the string.</td>\\n<td><code>auto it = s.begin();</code></td>\\n</tr>\\n<tr>\\n<td><code>end()</code></td>\\n<td>Returns an iterator to the end of the string.</td>\\n<td><code>auto it = s.end();</code></td>\\n</tr>\\n<tr>\\n<td><code>rbegin()</code></td>\\n<td>Returns a reverse iterator to the beginning of the reversed string.</td>\\n<td><code>auto it = s.rbegin();</code></td>\\n</tr>\\n<tr>\\n<td><code>rend()</code></td>\\n<td>Returns a reverse iterator to the end of the reversed string.</td>\\n<td><code>auto it = s.rend();</code></td>\\n</tr>\\n<tr>\\n<td><code>to_string(val)</code></td>\\n<td>Converts a number (<code>int</code>, <code>float</code>, etc.) to a string.</td>\\n<td><code>std::to_string(123);</code></td>\\n</tr>\\n<tr>\\n<td><code>stoi(str)</code></td>\\n<td>Converts a string to an integer.</td>\\n<td><code>int num = std::stoi(\\"123\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>stof(str)</code></td>\\n<td>Converts a string to a floating-point number.</td>\\n<td><code>float num = std::stof(\\"123.45\\");</code></td>\\n</tr>\\n<tr>\\n<td><code>getline(cin, str)</code></td>\\n<td>Reads an entire line of input into the string.</td>\\n<td><code>std::getline(std::cin, s);</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{a as comp,h as data};
